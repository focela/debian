# Automated Multi-Architecture Image Build Workflow
# Purpose: Scheduled and push-triggered workflow to build Docker images (Debian-based) for multiple architectures and variants
# Platforms: linux/amd64, linux/arm64, linux/arm/v7
# Registries: Docker Hub and GitHub Container Registry (GHCR)

name: "Automated Multi-Architecture Debian Image Build"

on:
  schedule:
    - cron: 1 0 * * 6
  push:
    paths:
      - '**'
      - '!README.md'

permissions:
  contents: read
  packages: write

jobs:
  bookworm:
    env:
      DISTRO_VARIANT: "bookworm"
      build_file: Dockerfile
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Prepare
        id: prep
        run: |
          # Handle branch-based builds
          if [[ "${GITHUB_REF}" == refs/heads/* ]]; then
              # Handle multi-level branches (e.g., feature/x becomes feature-x)
              if [[ "${GITHUB_REF}" == refs/heads/*/* ]] ; then
                  git_branch="${GITHUB_REPOSITORY/docker-/}:$(echo $GITHUB_REF | sed "s|refs/heads/||g" | sed "s|/|-|g")"
              else
                  git_branch=${GITHUB_REF#refs/heads/}
              fi

              # Different tag handling based on branch name
              case "${git_branch}" in
                  # Main/master branch - add variant tags and possibly 'latest'
                  "main" | "master" )
                      # Add :latest tag if this variant is marked as the default
                      if [ "${{ vars.LATEST }}" = "TRUE" ] || [ "${{ vars.LATEST }}" = "${DISTRO_VARIANT}" ]; then
                          image_latest=",${GITHUB_REPOSITORY}:latest"
                      fi
                      branch_tag="${GITHUB_REPOSITORY}:${DISTRO_VARIANT},${GITHUB_REPOSITORY}:${DISTRO_VARIANT}-latest${image_latest}"
                  ;;
                  # Develop branch gets a special tag
                  "develop" )
                      branch_tag="${GITHUB_REPOSITORY}:develop"
                  ;;
              esac
          fi

          # Handle tag-based builds (releases)
          if [[ "${GITHUB_REF}" == refs/tags/* ]]; then
              git_tag="${GITHUB_REPOSITORY}:${DISTRO_VARIANT}-$(echo ${GITHUB_REF} | sed 's|refs/tags/||g')"
          fi

          # Combine branch and tag names if both exist
          if [ -n "${branch_tag}" ] && [ -n "${git_tag}" ]; then
              image_tags=${branch_tag},${git_tag}
          else
              image_tags="${branch_tag}${git_tag}"
          fi

          # Set the Docker Hub repository name in environment
          echo "dockerhub_repo=${GITHUB_REPOSITORY/docker-/}" >> $GITHUB_ENV
          
          # Generate full image names for both DockerHub and GitHub Container Registry
          dockerhub_images=$(echo "${image_tags}" | sed "s|${GITHUB_REPOSITORY}|docker.io/${GITHUB_REPOSITORY/docker-/}|g")
          ghcr_images=$(echo "${image_tags}" | sed "s|${GITHUB_REPOSITORY}|ghcr.io/${GITHUB_REPOSITORY}|g")
          
          # Output the combined image tags for use in later steps
          echo "container_images=${dockerhub_images},${ghcr_images}" >> $GITHUB_OUTPUT

      - name: Label
        id: Label
        run: |
          # Extract clean repository name
          image_name=${GITHUB_REPOSITORY/docker-/}
          
          # Only proceed if the Dockerfile exists
          if [ -f "${{ env.build_file }}" ] ; then
              # Add standard Git repository metadata
              sed -i "/FROM .*/a LABEL tiredofit.${image_name}.git_repository=\"https://github.com/${GITHUB_REPOSITORY}\"" ${{ env.build_file }}
              sed -i "/FROM .*/a LABEL tiredofit.${image_name}.git_commit=\"${GITHUB_SHA}\"" ${{ env.build_file }}
              sed -i "/FROM .*/a LABEL tiredofit.${image_name}.git_committed_by=\"${GITHUB_ACTOR}\"" ${{ env.build_file }}
              sed -i "/FROM .*/a LABEL tiredofit.${image_name}.image_build_date=\"$(date +'%Y-%m-%d %H:%M:%S')\"" ${{ env.build_file }}
              sed -i "/FROM .*/a LABEL org.opencontainers.image.source https://github.com/${GITHUB_REPOSITORY}"  ${{ env.build_file }}

              # Add changelog version if CHANGELOG.md exists
              if [ -f "CHANGELOG.md" ] ; then
                  sed -i "/FROM .*/a LABEL tiredofit.${image_name}.git_changelog_version=\"$(head -n1 ./CHANGELOG.md | awk '{print $2}')\"" ${{ env.build_file }}
                  # Copy changelog to be included in the image
                  mkdir -p install/assets/.changelogs ; cp CHANGELOG.md install/assets/.changelogs/${GITHUB_REPOSITORY/\//_}.md
              fi

              # Add tag or branch specific metadata
              if [[ $GITHUB_REF == refs/tags/* ]]; then
                  sed -i "/FROM .*/a LABEL tiredofit.${image_name}.git_tag=\"${GITHUB_REF#refs/tags/v}\"" ${{ env.build_file }}
              fi

              if [[ $GITHUB_REF == refs/heads/* ]]; then
                  sed -i "/FROM .*/a LABEL tiredofit.${image_name}.git_branch=\"${GITHUB_REF#refs/heads/}\"" ${{ env.build_file }}
              fi
          fi

      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v3

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2
        with:
          platforms: arm,arm64

      - name: Login to DockerHub
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Login to GitHub Container Registry
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build
        if: github.event_name != 'pull_request'
        uses: docker/build-push-action@v5
        with:
          builder: ${{ steps.buildx.outputs.name }}
          context: .
          file: ./${{ env.build_file }}
          platforms: linux/amd64,linux/arm64,linux/arm/v7
          push: true
          tags: ${{ steps.prep.outputs.container_images }}
          build-args: |
            DEBIAN_VERSION=${{ env.DISTRO_VARIANT }}

      - name: Update Docker Hub Information
        if: github.event_name != 'pull_request'
        uses: peter-evans/dockerhub-description@v4
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
          repository: ${{ env.dockerhub_repo }}
          short-description: ${{ github.event.repository.description }}
          readme-filepath: ./README.md

  bullseye:
    env:
      DISTRO_VARIANT: "bullseye"
      build_file: Dockerfile
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Prepare
        id: prep
        run: |
          # Handle branch-based builds
          if [[ "${GITHUB_REF}" == refs/heads/* ]]; then
              # Handle multi-level branches (e.g., feature/x becomes feature-x)
              if [[ "${GITHUB_REF}" == refs/heads/*/* ]] ; then
                  git_branch="${GITHUB_REPOSITORY/docker-/}:$(echo $GITHUB_REF | sed "s|refs/heads/||g" | sed "s|/|-|g")"
              else
                  git_branch=${GITHUB_REF#refs/heads/}
              fi

              # Different tag handling based on branch name
              case "${git_branch}" in
                  # Main/master branch - add variant tags and possibly 'latest'
                  "main" | "master" )
                      # Add :latest tag if this variant is marked as the default
                      if [ "${{ vars.LATEST }}" = "TRUE" ] || [ "${{ vars.LATEST }}" = "${DISTRO_VARIANT}" ]; then
                          image_latest=",${GITHUB_REPOSITORY}:latest"
                      fi
                      branch_tag="${GITHUB_REPOSITORY}:${DISTRO_VARIANT},${GITHUB_REPOSITORY}:${DISTRO_VARIANT}-latest${image_latest}"
                  ;;
                  # Develop branch gets a special tag
                  "develop" )
                      branch_tag="${GITHUB_REPOSITORY}:develop"
                  ;;
              esac
          fi

          # Handle tag-based builds (releases)
          if [[ "${GITHUB_REF}" == refs/tags/* ]]; then
              git_tag="${GITHUB_REPOSITORY}:${DISTRO_VARIANT}-$(echo ${GITHUB_REF} | sed 's|refs/tags/||g')"
          fi

          # Combine branch and tag names if both exist
          if [ -n "${branch_tag}" ] && [ -n "${git_tag}" ]; then
              image_tags=${branch_tag},${git_tag}
          else
              image_tags="${branch_tag}${git_tag}"
          fi

          # Set the Docker Hub repository name in environment
          echo "dockerhub_repo=${GITHUB_REPOSITORY/docker-/}" >> $GITHUB_ENV
          
          # Generate full image names for both DockerHub and GitHub Container Registry
          dockerhub_images=$(echo "${image_tags}" | sed "s|${GITHUB_REPOSITORY}|docker.io/${GITHUB_REPOSITORY/docker-/}|g")
          ghcr_images=$(echo "${image_tags}" | sed "s|${GITHUB_REPOSITORY}|ghcr.io/${GITHUB_REPOSITORY}|g")
          
          # Output the combined image tags for use in later steps
          echo "container_images=${dockerhub_images},${ghcr_images}" >> $GITHUB_OUTPUT

      - name: Label
        id: Label
        run: |
          # Extract clean repository name
          image_name=${GITHUB_REPOSITORY/docker-/}
          
          # Only proceed if the Dockerfile exists
          if [ -f "${{ env.build_file }}" ] ; then
              # Add standard Git repository metadata
              sed -i "/FROM .*/a LABEL tiredofit.${image_name}.git_repository=\"https://github.com/${GITHUB_REPOSITORY}\"" ${{ env.build_file }}
              sed -i "/FROM .*/a LABEL tiredofit.${image_name}.git_commit=\"${GITHUB_SHA}\"" ${{ env.build_file }}
              sed -i "/FROM .*/a LABEL tiredofit.${image_name}.git_committed_by=\"${GITHUB_ACTOR}\"" ${{ env.build_file }}
              sed -i "/FROM .*/a LABEL tiredofit.${image_name}.image_build_date=\"$(date +'%Y-%m-%d %H:%M:%S')\"" ${{ env.build_file }}
              sed -i "/FROM .*/a LABEL org.opencontainers.image.source https://github.com/${GITHUB_REPOSITORY}"  ${{ env.build_file }}

              # Add changelog version if CHANGELOG.md exists
              if [ -f "CHANGELOG.md" ] ; then
                  sed -i "/FROM .*/a LABEL tiredofit.${image_name}.git_changelog_version=\"$(head -n1 ./CHANGELOG.md | awk '{print $2}')\"" ${{ env.build_file }}
                  # Copy changelog to be included in the image
                  mkdir -p install/assets/.changelogs ; cp CHANGELOG.md install/assets/.changelogs/${GITHUB_REPOSITORY/\//_}.md
              fi

              # Add tag or branch specific metadata
              if [[ $GITHUB_REF == refs/tags/* ]]; then
                  sed -i "/FROM .*/a LABEL tiredofit.${image_name}.git_tag=\"${GITHUB_REF#refs/tags/v}\"" ${{ env.build_file }}
              fi

              if [[ $GITHUB_REF == refs/heads/* ]]; then
                  sed -i "/FROM .*/a LABEL tiredofit.${image_name}.git_branch=\"${GITHUB_REF#refs/heads/}\"" ${{ env.build_file }}
              fi
          fi

      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v3

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2
        with:
          platforms: arm,arm64

      - name: Login to DockerHub
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Login to GitHub Container Registry
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build
        if: github.event_name != 'pull_request'
        uses: docker/build-push-action@v5
        with:
          builder: ${{ steps.buildx.outputs.name }}
          context: .
          file: ./${{ env.build_file }}
          platforms: linux/amd64,linux/arm64,linux/arm/v7
          push: true
          tags: ${{ steps.prep.outputs.container_images }}
          build-args: |
            DEBIAN_VERSION=${{ env.DISTRO_VARIANT }}

      - name: Update Docker Hub Information
        if: github.event_name != 'pull_request'
        uses: peter-evans/dockerhub-description@v4
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
          repository: ${{ env.dockerhub_repo }}
          short-description: ${{ github.event.repository.description }}
          readme-filepath: ./README.md

  buster:
    env:
      DISTRO_VARIANT: "buster"
      build_file: Dockerfile
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Prepare
        id: prep
        run: |
          # Handle branch-based builds
          if [[ "${GITHUB_REF}" == refs/heads/* ]]; then
              # Handle multi-level branches (e.g., feature/x becomes feature-x)
              if [[ "${GITHUB_REF}" == refs/heads/*/* ]] ; then
                  git_branch="${GITHUB_REPOSITORY/docker-/}:$(echo $GITHUB_REF | sed "s|refs/heads/||g" | sed "s|/|-|g")"
              else
                  git_branch=${GITHUB_REF#refs/heads/}
              fi

              # Different tag handling based on branch name
              case "${git_branch}" in
                  # Main/master branch - add variant tags and possibly 'latest'
                  "main" | "master" )
                      # Add :latest tag if this variant is marked as the default
                      if [ "${{ vars.LATEST }}" = "TRUE" ] || [ "${{ vars.LATEST }}" = "${DISTRO_VARIANT}" ]; then
                          image_latest=",${GITHUB_REPOSITORY}:latest"
                      fi
                      branch_tag="${GITHUB_REPOSITORY}:${DISTRO_VARIANT},${GITHUB_REPOSITORY}:${DISTRO_VARIANT}-latest${image_latest}"
                  ;;
                  # Develop branch gets a special tag
                  "develop" )
                      branch_tag="${GITHUB_REPOSITORY}:develop"
                  ;;
              esac
          fi

          # Handle tag-based builds (releases)
          if [[ "${GITHUB_REF}" == refs/tags/* ]]; then
              git_tag="${GITHUB_REPOSITORY}:${DISTRO_VARIANT}-$(echo ${GITHUB_REF} | sed 's|refs/tags/||g')"
          fi

          # Combine branch and tag names if both exist
          if [ -n "${branch_tag}" ] && [ -n "${git_tag}" ]; then
              image_tags=${branch_tag},${git_tag}
          else
              image_tags="${branch_tag}${git_tag}"
          fi

          # Set the Docker Hub repository name in environment
          echo "dockerhub_repo=${GITHUB_REPOSITORY/docker-/}" >> $GITHUB_ENV
          
          # Generate full image names for both DockerHub and GitHub Container Registry
          dockerhub_images=$(echo "${image_tags}" | sed "s|${GITHUB_REPOSITORY}|docker.io/${GITHUB_REPOSITORY/docker-/}|g")
          ghcr_images=$(echo "${image_tags}" | sed "s|${GITHUB_REPOSITORY}|ghcr.io/${GITHUB_REPOSITORY}|g")
          
          # Output the combined image tags for use in later steps
          echo "container_images=${dockerhub_images},${ghcr_images}" >> $GITHUB_OUTPUT

      - name: Label
        id: Label
        run: |
          # Extract clean repository name
          image_name=${GITHUB_REPOSITORY/docker-/}
          
          # Only proceed if the Dockerfile exists
          if [ -f "${{ env.build_file }}" ] ; then
              # Add standard Git repository metadata
              sed -i "/FROM .*/a LABEL tiredofit.${image_name}.git_repository=\"https://github.com/${GITHUB_REPOSITORY}\"" ${{ env.build_file }}
              sed -i "/FROM .*/a LABEL tiredofit.${image_name}.git_commit=\"${GITHUB_SHA}\"" ${{ env.build_file }}
              sed -i "/FROM .*/a LABEL tiredofit.${image_name}.git_committed_by=\"${GITHUB_ACTOR}\"" ${{ env.build_file }}
              sed -i "/FROM .*/a LABEL tiredofit.${image_name}.image_build_date=\"$(date +'%Y-%m-%d %H:%M:%S')\"" ${{ env.build_file }}
              sed -i "/FROM .*/a LABEL org.opencontainers.image.source https://github.com/${GITHUB_REPOSITORY}"  ${{ env.build_file }}

              # Add changelog version if CHANGELOG.md exists
              if [ -f "CHANGELOG.md" ] ; then
                  sed -i "/FROM .*/a LABEL tiredofit.${image_name}.git_changelog_version=\"$(head -n1 ./CHANGELOG.md | awk '{print $2}')\"" ${{ env.build_file }}
                  # Copy changelog to be included in the image
                  mkdir -p install/assets/.changelogs ; cp CHANGELOG.md install/assets/.changelogs/${GITHUB_REPOSITORY/\//_}.md
              fi

              # Add tag or branch specific metadata
              if [[ $GITHUB_REF == refs/tags/* ]]; then
                  sed -i "/FROM .*/a LABEL tiredofit.${image_name}.git_tag=\"${GITHUB_REF#refs/tags/v}\"" ${{ env.build_file }}
              fi

              if [[ $GITHUB_REF == refs/heads/* ]]; then
                  sed -i "/FROM .*/a LABEL tiredofit.${image_name}.git_branch=\"${GITHUB_REF#refs/heads/}\"" ${{ env.build_file }}
              fi
          fi

      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v3

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2
        with:
          platforms: arm,arm64

      - name: Login to DockerHub
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Login to GitHub Container Registry
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build
        if: github.event_name != 'pull_request'
        uses: docker/build-push-action@v5
        with:
          builder: ${{ steps.buildx.outputs.name }}
          context: .
          file: ./${{ env.build_file }}
          platforms: linux/amd64,linux/arm64,linux/arm/v7
          push: true
          tags: ${{ steps.prep.outputs.container_images }}
          build-args: |
            DEBIAN_VERSION=${{ env.DISTRO_VARIANT }}

      - name: Update Docker Hub Information
        if: github.event_name != 'pull_request'
        uses: peter-evans/dockerhub-description@v4
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
          repository: ${{ env.dockerhub_repo }}
          short-description: ${{ github.event.repository.description }}
          readme-filepath: ./README.md
