#!/command/with-contenv bash
#----------------------------------------------------------------------
# Container Scheduling Configuration
#
# Purpose: Sets up scheduling services (currently supports cron) for the
# container. Processes environment variables with CRON_ prefix and creates
# scheduled tasks based on them.
#----------------------------------------------------------------------

# Enable strict error handling
set -euo pipefail

#----------------------------------------------------------------------
# CONFIGURATION
#----------------------------------------------------------------------
# Source container functions library
source /assets/functions/00-container
output_off
prepare_service single
PROCESS_NAME="scheduling"

# Handle legacy environment variables
if var_false "${ENABLE_CRON}" ; then
  CONTAINER_ENABLE_SCHEDULING=FALSE
fi

if var_true "${ENABLE_CRON}" ; then
  CONTAINER_ENABLE_SCHEDULING=TRUE
  CONTAINER_SCHEDULING_BACKEND="cron"
fi

#----------------------------------------------------------------------
# MAIN EXECUTION
#----------------------------------------------------------------------
# Check if scheduling is enabled - if not, disable this service
if var_false "${CONTAINER_ENABLE_SCHEDULING}" ; then
  print_debug "Disabling Scheduling"
  service_stop "$(basename "$0")"
else
  # Process based on scheduling backend type
  case "${CONTAINER_SCHEDULING_BACKEND,,}" in
    "cron" )
      # Create temp directory for cron processing
      mkdir -p /tmp/.container/cron

      # Set up logging if configured to use files
      if [ "${SCHEDULING_LOG_TYPE,,}" = "file" ] ; then
        mkdir -p "${SCHEDULING_LOG_LOCATION}"
        touch "${SCHEDULING_LOG_LOCATION}"/cron.log
        create_logrotate cron "${SCHEDULING_LOG_LOCATION}"/cron.log
      fi

      # Create scheduling directory if it doesn't exist
      if [ ! -d "${CONTAINER_SCHEDULING_LOCATION}" ]; then
        mkdir -p "${CONTAINER_SCHEDULING_LOCATION}"
      fi

      #----------------------------------------------------------------------
      # PROCESS DOCKER RUNTIME ENV VARIABLES
      #----------------------------------------------------------------------
      # Extract CRON_ variables from current environment
      print_debug "Processing container runtime CRON_ environment variables"
      cronenv=$(mktemp)
      set -o posix; set -f
      set | grep -E '^CRON_'| sed "s|CRON_||g" > ${cronenv}
      sed -i "/^PERIOD/d" "${cronenv}"

      # Process each cron entry
      while IFS= read -r cron_entry; do
        schedule_title="$(echo ${cron_entry} | cut -d = -f1 | tr '[:upper:]' '[:lower:]' )"
        schedule_value="$(echo ${cron_entry} | cut -d = -f2 )"
        schedule_value="$(echo ${schedule_value:1:-1})"

        if var_false "${schedule_value}" ; then
          # Create disabled task entry
          print_debug "Disabling ${schedule_title} scheduled task"
          cat <<EOF > "${CONTAINER_SCHEDULING_LOCATION}/${schedule_title}"
# Nulled execution of command generated by Environment Variable defined in Image build, or Runtime argument
# Entered Value: ${schedule}
# Generated on $(TZ=${TIMEZONE} date +'%Y-%m-%d %H:%M:%S %Z')
EOF
        else
          # Create active task entry
          print_debug "Adding ${schedule_title} with to be parsed by ${CONTAINER_SCHEDULING_BACKEND}"
          cat <<EOF > "${CONTAINER_SCHEDULING_LOCATION}/${schedule_title}"
# Scheduled execution of command created automatically generated by Environment Variable defined in Image build, or Runtime argument
# Entered Value: ${schedule}
# Generated on $(TZ=${TIMEZONE} date +'%Y-%m-%d %H:%M:%S %Z')

${schedule_value}
EOF
        fi
      done < ${cronenv}

      # Clean up
      rm -rf $cronenv
      set +f
      unset cronenv schedules cron_entry schedule_value schedule_title
      unset "${!CRON_@}"

      #----------------------------------------------------------------------
      # PROCESS DEFAULT CONFIGURATIONS
      #----------------------------------------------------------------------
      # Process CRON_ variables from each defaults file
      print_debug "Processing default configurations for CRON_ variables"
      for d in /assets/defaults/* ; do
        if [ "$d" != "/assets/defaults/00-container" ] ; then
          # Source the defaults file
          output_off
          source $d
          output_on

          # Extract CRON_ variables
          cronenv=$(mktemp)
          set -o posix; set -f
          set | grep -E '^CRON_'| sed "s|CRON_||g" > "${cronenv}"
          sed -i "/^PERIOD/d" "${cronenv}"

          # Process each cron entry
          while IFS= read -r cron_entry; do
            schedule_title="$(echo ${cron_entry} | cut -d = -f1 | tr '[:upper:]' '[:lower:]')"
            schedule_value="$(echo ${cron_entry} | cut -d = -f2 )"
            schedule_value="$(echo ${schedule_value:1:-1})"

            # Only add if task doesn't already exist
            if [ ! -f "${CONTAINER_SCHEDULING_LOCATION}/${schedule_title,,}" ] ; then
              print_debug "Adding $schedule_title with value $schedule_value to crontab"
              cat <<EOF > "${CONTAINER_SCHEDULING_LOCATION}/${schedule_title,,}"
# Scheduled execution of command taken from default file: '${d}'
# Entered Value: ${schedule}
# Generated on $(TZ=${TIMEZONE} date +'%Y-%m-%d %H:%M:%S %Z')

${schedule_value}
EOF
            else
              print_debug "Skipping adding '${schedule_title}' as it already exists"
            fi
          done < "${cronenv}"

          # Clean up
          rm -rf $cronenv
          set +f
          unset cronenv schedules cron_entry schedule_value schedule_title
          unset "${!CRON_@}"
        fi
      done

      print_notice "Container configured for scheduled tasks with 'cron'"
    ;;
    *)
      print_error "Unknown Scheduling Backend"
      exit 1
    ;;
  esac
fi

# Mark initialization as complete
liftoff
output_on
