#!/command/with-contenv bash
#----------------------------------------------------------------------
# Permissions Configuration Script (02-permissions)
#
# Purpose: Dynamically adjusts user and group IDs within the container
# based on environment variables. This ensures file ownership matches
# between host and container, preventing permission issues.
#
# Environment Variables:
#   - CONTAINER_ENABLE_PERMISSIONS: Enable permission management (true/false)
#   - DEBUG_PERMISSIONS: Enable debug logging for this script
#   - USER_*: Define user ID mappings (e.g., USER_NGINX=1001)
#   - GROUP_*: Define group ID mappings (e.g., GROUP_NGINX=1001)
#   - GROUP_ADD_*: Add users to groups (e.g., GROUP_ADD_DOCKER=nginx,app)
#
# Legacy Support:
#   - ENABLE_PERMISSIONS: Deprecated, use CONTAINER_ENABLE_PERMISSIONS
#
# Note: This script modifies /etc/passwd and /etc/group directly
#----------------------------------------------------------------------

#----------------------------------------------------------------------
# INITIALIZATION
#----------------------------------------------------------------------
# Load container function library
source /assets/functions/00-container

# Disable debug output for cleaner initialization
output_off

# Set process name for logging
# shellcheck disable=SC2034
PROCESS_NAME="permissions"

#----------------------------------------------------------------------
# CONFIGURATION
#----------------------------------------------------------------------
# Handle legacy ENABLE_PERMISSIONS variable for backward compatibility
if var_true "${ENABLE_PERMISSIONS}" ; then
  CONTAINER_ENABLE_PERMISSIONS=TRUE
elif var_false "${ENABLE_PERMISSIONS}" ; then
  CONTAINER_ENABLE_PERMISSIONS=FALSE
fi

# Enable debug mode if requested
# This overrides the container log level for detailed permission logging
if var_true "${DEBUG_PERMISSIONS}" ; then
  CONTAINER_LOG_LEVEL="DEBUG"
fi

#----------------------------------------------------------------------
# MAIN EXECUTION
#----------------------------------------------------------------------
# Process permissions only if explicitly enabled
if var_true "${CONTAINER_ENABLE_PERMISSIONS}" ; then
  print_debug "Enabling permissions features"

  #--------------------------------------------------------------------
  # USER ID MODIFICATIONS
  #--------------------------------------------------------------------
  # Extract USER_* and CONTAINER_USER_* environment variables
  # Format: USER_NGINX=1001 sets nginx user to UID 1001
  # Note: Variable names are converted to lowercase for username matching
  # The long pipeline extracts, transforms, and formats the variable names
  unames="$(set -o posix ; set | sort | grep -e '^USER_' | sed "s|^USER_||g" | \
    tr '[:upper:]' '[:lower:]' | tr ' ' '\n') "
  unames+="$(set -o posix ; set | sort | grep -e '^CONTAINER_USER_' | \
    sed "s|^CONTAINER_USER_||g" | tr '[:upper:]' '[:lower:]' | tr ' ' '\n')"

  # Process each user ID mapping
  for upair in $unames; do
    uname=$(echo $upair | cut -d = -f 1)
    uid=$(echo $upair | cut -d = -f 2)
    _userexists=false

    # Check if user exists (handles both underscore and dash variants)
    # Some systems use dashes in usernames where env vars have underscores
    if grep -e "^${uname}" /etc/passwd > /dev/null; then
      _userexists=true
    elif grep -e "^${uname/_/-}" /etc/passwd > /dev/null; then
      _userexists=true
      uname=${uname/_/-}
    fi

    # Update user ID if user exists
    if [ "${_userexists}" = true ] ; then
      # Extract current UID from passwd file
      ouid=$(grep -e "^${uname}" /etc/passwd | awk -F: '{print $3}')

      print_debug "Changing user '${uname}' to uid '${uid}' from '${ouid}'"
      # Replace UID in passwd file while preserving other fields
      sed -i "s|${uname}:x:${ouid}:|${uname}:x:${uid}:|g" /etc/passwd
    fi
  done

  #--------------------------------------------------------------------
  # GROUP ID MODIFICATIONS
  #--------------------------------------------------------------------
  # Extract GROUP_* and CONTAINER_GROUP_* environment variables
  # Excludes GROUP_ADD_* variables which are handled separately
  # Format: GROUP_NGINX=1001 sets nginx group to GID 1001
  # The sed '/add_.*/d' removes GROUP_ADD_* entries from processing
  groups="$(set -o posix ; set | sort | grep -e '^GROUP_' | sed "s|^GROUP_||g" | \
    tr '[:upper:]' '[:lower:]' | tr ' ' '\n' | sed '/add_.*/d' ) "
  groups+="$(set -o posix ; set | sort | grep -e '^CONTAINER_GROUP_' | \
    sed "s|^CONTAINER_GROUP_||g" | tr '[:upper:]' '[:lower:]' | tr ' ' '\n' | sed '/add_.*/d' ) "

  # Process each group ID mapping
  for gpair in $groups; do
    gname=$(echo $gpair | cut -d = -f 1)
    gid=$(echo $gpair | cut -d = -f 2)
    _groupexists=false

    # Check if group exists (handles both underscore and dash variants)
    if grep -e "^${gname}" /etc/group > /dev/null; then
      _groupexists=true
    elif grep -e "^${gname/_/-}" /etc/group > /dev/null; then
      _groupexists=true
      gname=${gname/_/-}
    fi

    # Update group ID if group exists
    if [ "${_groupexists}" = true ] ; then
      # Extract current group information
      opu=$(grep -e "^${gname}" /etc/passwd | awk -F: '{print $1}')
      opuid=$(grep -e "^${gname}" /etc/passwd | awk -F: '{print $3}')
      opgid=$(grep -e "^${gname}" /etc/passwd | awk -F: '{print $4}')
      og=$(grep -e "^${gname}" /etc/group | awk -F: '{print $1}')
      oggid=$(grep -e "^${gname}" /etc/group | awk -F: '{print $3}')

      print_debug "Changing group '${gname}' to gid '${gid}' from '${oggid}'"
      # Update GID in passwd file (for users with this as primary group)
      sed -i "s|\(.*\):\(.*\):\(.*\):${opgid}:|\1:\2:\3:${gid}:|g" /etc/passwd
      # Update GID in group file
      sed -i "s|${og}:x:${oggid}|${og}:x:${gid}|g" /etc/group
    fi
  done

  #--------------------------------------------------------------------
  # GROUP MEMBERSHIP MODIFICATIONS
  #--------------------------------------------------------------------
  # Extract GROUP_ADD_* and CONTAINER_GROUP_ADD_* environment variables
  # Format: GROUP_ADD_DOCKER=nginx,app adds nginx and app users to docker group
  # Users are comma-separated in the value
  groupsadd="$(set -o posix ; set | sort | grep -e '^GROUP_ADD_' | \
    sed 's|^GROUP_ADD_||g' | tr '[:upper:]' '[:lower:]' ) "
  groupsadd+="$(set -o posix ; set | sort | grep -e '^CONTAINER_GROUP_ADD_' | \
    sed 's|^CONTAINER_GROUP_ADD_||g' | tr '[:upper:]' '[:lower:]' )"

  # Process each group membership addition
  for gau in $groupsadd; do
    gname=$(echo ${gau} | cut -d = -f1 )
    _groupexists=false

    # Check if group exists (handles both underscore and dash variants)
    if grep -e "^${gname}" /etc/group > /dev/null; then
      _groupexists=true
    elif grep -e "^${gname/_/-}" /etc/group > /dev/null; then
      _groupexists=true
      gname=${gname/_/-}
    fi

    # Add users to group if it exists
    if [ "${_groupexists}" = true ] ; then
      # Extract comma-separated list of users and convert to newline-separated
      uta=$(echo ${gau} | cut -d = -f2 | tr ',' '\n')

      # Add each user to the group
      for userstogroup in ${uta} ; do
        print_debug "Adding user '${userstogroup}' to '${gname}'"
        # Use OS-specific commands for group membership
        os=$(cat /etc/os-release |grep ^ID= | cut -d = -f2)
        case ${os,,} in
          "alpine" )
            # Alpine uses addgroup command
            silent addgroup ${userstogroup} ${gname}
          ;;
          "debian" | "ubuntu" )
            # Debian/Ubuntu use usermod command
            silent usermod -a -G ${gname} ${userstogroup}
          ;;
        esac
      done
    fi
  done
fi

#----------------------------------------------------------------------
# FINALIZATION
#----------------------------------------------------------------------
# Mark this initialization script as complete
liftoff

# Re-enable debug output if it was previously enabled
output_on
