#!/command/with-contenv bash
#----------------------------------------------------------------------
# Monitoring Configuration Script (03-monitoring)
#
# Purpose: Configures container monitoring using Zabbix agents. Supports
# both classic (v1) and modern (v2) Zabbix agents with optional PSK
# encryption for secure communication.
#
# Environment Variables:
#   - CONTAINER_ENABLE_MONITORING: Enable monitoring (true/false)
#   - CONTAINER_MONITORING_BACKEND: Backend type (currently only "zabbix")
#   - ENABLE_ZABBIX: Legacy variable for backward compatibility
#   - ZABBIX_AGENT_TYPE: Agent version (1/classic or 2/modern)
#   - ZABBIX_SETUP_TYPE: Configuration mode (auto/manual)
#   - ZABBIX_SERVER: Zabbix server address
#   - ZABBIX_HOSTNAME: Agent hostname for Zabbix
#   - ZABBIX_ENCRYPT_PSK_*: PSK encryption settings
#   - ZABBIX_USER_SUDO/DOAS: Grant sudo/doas privileges to zabbix user
#
# Files Generated:
#   - /etc/zabbix/zabbix_agentd.conf (main config)
#   - /etc/zabbix/zabbix_agentd.conf.d/*.conf (additional configs)
#----------------------------------------------------------------------

#----------------------------------------------------------------------
# INITIALIZATION
#----------------------------------------------------------------------
# Load container function library
source /assets/functions/00-container

# Disable debug output for cleaner initialization
output_off

# Prepare service for single-instance execution
prepare_service single

# Set process name for logging
PROCESS_NAME="monitoring"

#----------------------------------------------------------------------
# CONFIGURATION
#----------------------------------------------------------------------
# Handle legacy ENABLE_ZABBIX variable for backward compatibility
# This maintains support for older container configurations
if var_false "${ENABLE_ZABBIX}"; then
  CONTAINER_ENABLE_MONITORING=FALSE
fi

if var_true "${ENABLE_ZABBIX}"; then
  CONTAINER_ENABLE_MONITORING=TRUE
  CONTAINER_MONITORING_BACKEND=zabbix
fi

#----------------------------------------------------------------------
# MAIN EXECUTION
#----------------------------------------------------------------------
if var_true "${CONTAINER_ENABLE_MONITORING}" ; then
  # Process monitoring backend selection
  case "${CONTAINER_MONITORING_BACKEND,,}" in
    "zabbix" )
      print_debug "Using Zabbix Backend"

      # Detect operating system for OS-specific configurations
      os=$(cat /etc/os-release |grep ^ID= | cut -d = -f2)

      # Set Zabbix debug level if container is in debug mode
      if var_true "${DEBUG_MODE}" ; then
        ZABBIX_DEBUGLEVEL=4
      fi

      #----------------------------------------------------------------
      # PRIVILEGE ELEVATION SETUP
      #----------------------------------------------------------------
      # Grant sudo privileges to zabbix user if requested
      # This allows Zabbix to execute system commands for monitoring
      if var_true "${ZABBIX_USER_SUDO}" ; then
        grant_sudo zabbix
      fi

      # Grant doas privileges to zabbix user if requested
      # Alternative to sudo for Alpine Linux
      if var_true "${ZABBIX_USER_DOAS}" ; then
        grant_doas zabbix
      fi

      #----------------------------------------------------------------
      # PSK ENCRYPTION SETUP
      #----------------------------------------------------------------
      # Configure Pre-Shared Key encryption if any PSK variables are set
      if [ -n "${ZABBIX_ENCRYPT_PSK_ID}" ] || [ -n "${ZABBIX_ENCRYPT_PSK_KEY}" ] || \
         [ -n "${ZABBIX_ENCRYPT_PSK_FILE}" ] ; then

        # Transform file-based environment variables if needed
        transform_file_var \
          ZABBIX_ENCRYPT_PSK_ID \
          ZABBIX_ENCRYPT_PSK_KEY

        print_debug "Zabbix Agent - Using PSK Encryption"

        # Validate PSK configuration
        if [ ! -n "${ZABBIX_ENCRYPT_PSK_FILE}" ] && [ ! -n "${ZABBIX_ENCRYPT_PSK_KEY}" ] ; then
          print_error "You've selected Zabbix Agent PSK Encryption but haven't supplied a file or a Key!"
          exit 1
        fi

        # Create PSK file from environment variable if file not specified
        if [ ! -n "${ZABBIX_ENCRYPT_PSK_FILE}" ] && [ -n "${ZABBIX_ENCRYPT_PSK_KEY}" ] ; then
          print_debug "Zabbix Agent - Only have PSK via ENV Var (Automated creation of file)"
          # PSK should be 256-bit (32 hex bytes) for security
          mkdir -p "${ZABBIX_CERT_PATH}"
          ZABBIX_ENCRYPT_PSK_FILE="zabbix_agent.psk"
          echo "${ZABBIX_ENCRYPT_PSK_KEY}" > "${ZABBIX_CERT_PATH}"/"${ZABBIX_ENCRYPT_PSK_FILE}"
        fi

        # Set secure permissions on PSK file (readable only by owner)
        chmod -f 0600 "${ZABBIX_CERT_PATH}"/"${ZABBIX_ENCRYPT_PSK_FILE}"
        chown -f -R "${ZABBIX_USER}" "${ZABBIX_CERT_PATH}"

        # Generate PSK configuration snippet for inclusion in main config
        tls_psk=$(cat<<EOF
TLSConnect=psk
TLSPSKIdentity=${ZABBIX_ENCRYPT_PSK_ID}
TLSPSKFile=${ZABBIX_CERT_PATH}/${ZABBIX_ENCRYPT_PSK_FILE}
EOF
        )
      fi

      # Transform Zabbix server address from file if needed
      transform_file_var ZABBIX_SERVER

      #----------------------------------------------------------------
      # AGENT CONFIGURATION GENERATION
      #----------------------------------------------------------------
      # Configure based on agent type (classic v1 or modern v2)
      case "${ZABBIX_AGENT_TYPE,,}" in
        "1" | "classic" | "c" | "legacy" | "old" )
          logship_version="classic"

          # Generate configuration only in auto mode
          if [ "${ZABBIX_SETUP_TYPE,,}" = "auto" ] ; then
            print_debug "Configuring Zabbix classic Agent"

            # Generate Zabbix Agent v1 configuration
            cat <<EOF > "${ZABBIX_CONFIG_PATH}"/"${ZABBIX_CONFIG_FILE}"
# Custom Generated Zabbix Agent configuration for version 1. If you want to use your own config set 'ZABBIX_SETUP_TYPE=MANUAL'
# Generated on $(TZ=${TIMEZONE} date +'%Y-%m-%d %H:%M:%S %Z')

AllowKey=system.run[${ZABBIX_REMOTECOMMANDS_ALLOW}]
AllowRoot=${ZABBIX_ALLOW_ROOT}
BufferSend=${ZABBIX_BUFFER_SEND}
BufferSize=${ZABBIX_BUFFER_SIZE}
DebugLevel=${ZABBIX_DEBUGLEVEL}
Hostname=${ZABBIX_HOSTNAME}
ListenIP=${ZABBIX_LISTEN_IP}
ListenPort=${ZABBIX_LISTEN_PORT}
LogFile=${ZABBIX_AGENT_LOG_PATH}/${ZABBIX_AGENT_LOG_FILE}
LogFileSize=${ZABBIX_LOG_FILE_SIZE}
LogRemoteCommands=${ZABBIX_REMOTECOMMANDS_LOG}
MaxLinesPerSecond=${ZABBIX_MAXLINES_SECOND}
PidFile=${ZABBIX_PID}
RefreshActiveChecks=${ZABBIX_REFRESH_ACTIVE_CHECKS}
Server=${ZABBIX_SERVER}
ServerActive=${ZABBIX_SERVER_ACTIVE}
StartAgents=${ZABBIX_START_AGENTS}
User=${ZABBIX_USER}
${tls_psk}
Include=${ZABBIX_CONFIG_PATH}/${ZABBIX_CONFIG_FILE}.d/*.conf
EOF
          else
            print_debug "Skipping Configuring Zabbix classic Agent"
          fi
        ;;

        "2" | "m" | "n" | "modern" | "new" )
          # Verify OS compatibility for modern agent
          case ${os} in
            "alpine" )
              # Extract Alpine version to check compatibility
              osver=$(cat /etc/os-release | grep VERSION_ID | cut -d = -f 2 | cut -d . -f 2 | cut -d _ -f 1)
              # Modern agent requires Alpine 3.11 or newer
              if [ "${osver}" -ge 11 ] || [ "$osver" = "edge" ] || [ "$osver" = "17*" ]; then
                print_debug "We are using newer than Alpine 3.11 to be able to use the Zabbix Modern client.."
              else
                print_error "Sorry, Modern version not available for this images version (Alpine 3.11 + only)"
                exit 1
              fi
            ;;
          esac

          logship_version="modern"

          # Generate configuration only in auto mode
          if [ "${ZABBIX_SETUP_TYPE,,}" = "auto" ] ; then
            print_debug "Configuring Zabbix modern Agent"

            # Generate Zabbix Agent v2 configuration
            cat <<EOF > "${ZABBIX_CONFIG_PATH}"/"${ZABBIX_CONFIG_FILE}"
# Custom Generated Zabbix Agent configuration for version 2 If you want to use your own config set 'ZABBIX_SETUP_TYPE=MANUAL'
# Generated on $(TZ=${TIMEZONE} date +'%Y-%m-%d %H:%M:%S %Z')

AllowKey=system.run[${ZABBIX_REMOTECOMMANDS_ALLOW}]
BufferSend=${ZABBIX_BUFFER_SEND}
BufferSize=${ZABBIX_BUFFER_SIZE}
ControlSocket=${ZABBIX_SOCKET}
DebugLevel=${ZABBIX_DEBUGLEVEL}
Hostname=${ZABBIX_HOSTNAME}
ListenPort=${ZABBIX_LISTEN_PORT}
LogFile=${ZABBIX_AGENT_LOG_PATH}/${ZABBIX_AGENT_LOG_FILE}
LogFileSize=${ZABBIX_LOG_FILE_SIZE}
RefreshActiveChecks=${ZABBIX_REFRESH_ACTIVE_CHECKS}
Server=${ZABBIX_SERVER}
ServerActive=${ZABBIX_SERVER_ACTIVE}
StatusPort=${ZABBIX_STATUS_PORT}
PidFile=${ZABBIX_PID}
${tls_psk}
Include=${ZABBIX_CONFIG_PATH}/${ZABBIX_CONFIG_FILE}.d/*.conf
EOF
          else
            print_debug "Skipping Configuring Zabbix modern Agent"
          fi
        ;;
      esac

      # Add DenyKey configuration if remote commands should be denied
      if [ -n "${ZABBIX_REMOTECOMMANDS_DENY}" ]; then
        echo "DenyKey=system.run[${ZABBIX_REMOTECOMMANDS_DENY}]" >> "${ZABBIX_CONFIG_PATH}"/"${ZABBIX_CONFIG_FILE}"
      fi

      #----------------------------------------------------------------
      # CONTAINER-SPECIFIC MONITORING CONFIGURATION
      #----------------------------------------------------------------
      print_debug "Zabbix Agent - Generating Collection Configuration"

      # Generate OS-specific package update check commands
      case ${os} in
        "alpine" )
          # Alpine uses apk for package management
          updated_packages="UserParameter=packages.upgradable,doas apk update >/dev/null && apk version | sed '/Installed/d' | wc -l"
        ;;
        "debian" | "ubuntu" )
          # Debian/Ubuntu use apt/aptitude for package management
          updated_packages="UserParameter=packages.upgradable,doas apt-get update >/dev/null && doas aptitude search '~U' | wc -l"
        ;;
      esac

      # Create configuration directory for additional configs
      mkdir -p "${ZABBIX_CONFIG_PATH}"/"${ZABBIX_CONFIG_FILE}".d

      # Generate container-specific monitoring configuration
      cat <<EOF > "${ZABBIX_CONFIG_PATH}"/"${ZABBIX_CONFIG_FILE}".d/focela-container_agent.conf
# Zabbix Container Agent Configuration - Automatically Generated based on Operating System
# Find Companion Zabbix Server Templates at https://github.com/focela/docker-alpine or https://github.com/focela/docker-debian
# Autoregister=toica

## Report on Container OS
UserParameter=agent.os,grep "PRETTY_NAME" /etc/os-release | cut -d '"' -f2

## Report on packages that are available to be upgraded
${updated_packages}
EOF

      #----------------------------------------------------------------
      # PERMISSIONS AND LOG ROTATION SETUP
      #----------------------------------------------------------------
      # Create log directory and set proper ownership
      mkdir -p "${ZABBIX_AGENT_LOG_PATH}"
      chown -R "${ZABBIX_USER}":root "${ZABBIX_AGENT_LOG_PATH}"
      chown -R "${ZABBIX_USER}":root "${ZABBIX_CONFIG_PATH}"
      chown -R "${ZABBIX_USER}":root /var/lib/zabbix
      chmod 775 "${ZABBIX_CONFIG_PATH}"

      # Configure log rotation for Zabbix agent logs
      create_logrotate zabbix-agent \
        "${ZABBIX_AGENT_LOG_PATH}"/"${ZABBIX_AGENT_LOG_FILE}" \
        zabbix-agent-${logship_version} \
        "${ZABBIX_USER}" \
        root

      # Notify successful configuration
      print_notice "Container configured for monitoring with '${CONTAINER_MONITORING_BACKEND} ${ZABBIX_AGENT_TYPE}'"
    ;;

    * )
      # Exit if unknown monitoring backend is specified
      print_error "Unknown Monitoring Backend"
      exit 1
    ;;
  esac
else
  # Stop monitoring service if monitoring is disabled
  service_stop "$(basename "$0")"
fi

#----------------------------------------------------------------------
# FINALIZATION
#----------------------------------------------------------------------
# Mark this initialization script as complete
liftoff

# Re-enable debug output if it was previously enabled
output_on
