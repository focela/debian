#!/command/with-contenv bash
#----------------------------------------------------------------------
# Container Scheduling Service Runner
#
# Purpose: S6 service script that configures and runs the scheduling
# service (cron) for executing scheduled tasks within the container.
# This script also handles logrotate configuration for log files.
#----------------------------------------------------------------------

# Enable strict error handling
set -euo pipefail

#----------------------------------------------------------------------
# CONFIGURATION
#----------------------------------------------------------------------
# Source container functions library and prepare environment
source /assets/functions/00-container
PROCESS_NAME="scheduling"
output_off
prepare_service
check_container_initialized
check_service_initialized init

#----------------------------------------------------------------------
# LOGROTATE CONFIGURATION
#----------------------------------------------------------------------
if var_true "${CONTAINER_ENABLE_LOGROTATE}" ; then
  print_debug "[logrotate] Setting Logrotate retention days after all services have finished initializing"

  # Create logrotate configuration directory
  mkdir -p /etc/logrotate.d

  # Copy logrotate configuration files from assets
  print_debug "[logrotate] Moving files from /assets/logrotate to /etc/logrotate.d"
  cp -R /assets/logrotate/* /etc/logrotate.d

  # Update retention period in all logrotate configurations
  sed -i "s|rotate .*|rotate ${LOGROTATE_RETAIN_DAYS}|g" /etc/logrotate.d/*

  # Fix any double slashes in log paths
  sed -i "s|//|/|g" /etc/logrotate.d/*

  # Set proper ownership and permissions
  chown -R root:root /etc/logrotate.d
  chmod -R 0644 /etc/logrotate.d
fi

# Mark initialization as complete
liftoff

#----------------------------------------------------------------------
# MAIN EXECUTION
#----------------------------------------------------------------------
case "${CONTAINER_SCHEDULING_BACKEND}" in
  "cron" )
    #----------------------------------------------------------------------
    # CRON CONFIGURATION
    #----------------------------------------------------------------------
    # Configure log file if file logging is enabled
    if [ "${SCHEDULING_LOG_TYPE,,}" = "file" ]; then
      cron_log_file="-L ${SCHEDULING_LOG_LOCATION}/cron.log"
    fi

    #----------------------------------------------------------------------
    # CRONTAB SETUP
    #----------------------------------------------------------------------
    print_debug "Parsing all files from ${CONTAINER_SCHEDULING_LOCATION}"

    # Create temporary crontab file
    temp_crontab=$(date +%s)

    # Ensure no mail is sent for cron jobs
    echo 'MAILTO=""' > $temp_crontab

    # Create an empty placeholder file if the scheduling directory is empty
    if dir_empty "${CONTAINER_SCHEDULING_LOCATION}" ; then
      echo "# Intentionally empty" > "${CONTAINER_SCHEDULING_LOCATION}"/empty
    fi

    # Extract cron jobs from all files in scheduling directory, removing comments and empty lines
    sed "/#/d" "${CONTAINER_SCHEDULING_LOCATION}"/* | awk 'NF' >> /tmp/.container/cron/${temp_crontab}

    # Remove any existing crontab and install the new one
    silent crontab -r
    crontab /tmp/.container/cron/${temp_crontab}

    #----------------------------------------------------------------------
    # CRON SERVICE STARTUP
    #----------------------------------------------------------------------
    print_start "Starting cron"

    # Detect OS type for appropriate cron command
    os=$(cat /etc/os-release |grep ^ID= | cut -d = -f2)
    case ${os} in
      "alpine" )
        # Start Alpine's crond
        output_on
        exec /usr/sbin/crond -f -l ${SCHEDULING_LOG_LEVEL} ${cron_log_file}
      ;;
      "debian" | "ubuntu" )
        # Start Debian/Ubuntu's crond
        output_on
        exec /usr/sbin/crond -f -l ${SCHEDULING_LOG_LEVEL} ${cron_log_file}
      ;;
    esac
  ;;
esac
