#!/command/with-contenv bash
#--------------------------------------------------
# Script: 00-container
# Description: Core utility functions for container management and operations
# providing logging, environment handling, database connectivity, service
# management, and various helper functions for containerized applications.
#--------------------------------------------------

# Enable strict mode
set -euo pipefail
IFS=$'\n\t'

# Source the container defaults
source /assets/defaults/00-container

#--------------------------------------------------
# Configuration
#--------------------------------------------------

# Terminal colors for logging
bdg="\e[42m"     # Green background
bdb="\e[44m"     # Blue background
bdm="\e[45m"     # Magenta background
bdgy="\e[100m"   # Gray background
blr="\e[101m"    # Light red background
boff="\e[49m"    # Reset background

#--------------------------------------------------
# Helper Functions
#--------------------------------------------------

# Container Initialization Functions
#--------------------------------------------------
# Check if container initialization scripts have completed
check_container_initialized() {
  print_debug "Checking to see if container initialization scripts have completed"
  output_off
  while [ ! -f /tmp/.container/99-container-init ]; do
    print_debug "Checking to see if container initialization scripts have completed"
    sleep 1
  done
  output_on
}

# Check if a service has been initialized
check_service_initialized() {
  print_debug "Checking to see if service has initialized"
  output_off

  if [ "$1" = "init" ]; then
    serviceSuffix="-init"
    csiBypass=FALSE
  else
    service="$1"
    csiBypass=TRUE
  fi

  if [ "$csiBypass" = "FALSE" ]; then
    if [ -z "$2" ]; then
      case "$(dirname "$0")" in
        "/var/run/s6/etc/cont-init.d" | "/etc/cont-init.d" )
          service=$(basename "$0")
        ;;
        *)
          service=$(basename "$PWD")
        ;;
      esac
    else
      service=$2
    fi
  fi

  while [ ! -f /tmp/.container/"${service}"${serviceSuffix} ]; do
    sleep 1
    print_debug "Looking for existence of /tmp/.container/${service}${serviceSuffix}"
  done

  unset csiBypass
  output_on
}

# Record service initialization in the container status directory
liftoff() {
  output_off
  mkdir -p /tmp/.container || exit 1

  if [ "$DONOTSTART" = "TRUE" ]; then
    liftoffPrefix="DONOTSTART "
  fi

  case "$(dirname "$0")" in
    "/var/run/s6/etc/cont-init.d" | "/etc/cont-init.d" )
      echo "${liftoffPrefix} $(basename "$0")-init initialized on $(log_prefix)" >> /tmp/.container/"$(basename "$0")"-init
    ;;
    *)
      if [ ! -f /tmp/.container/"$(basename "$PWD")" ]; then
        echo "$(basename "$PWD") initialized on $(log_prefix)" >> /tmp/.container/"$(basename "$PWD")"
      else
        echo "$(basename "$PWD") reinitialized on $(log_prefix)" >> /tmp/.container/"$(basename "$PWD")"
      fi
    ;;
  esac
  output_on
}

# Display container banner and information
showoff() {
  output_off
  if [ -n "${IMAGE_NAME}" ]; then
    iv=$(get_image_version)
    is="$(echo 'H4sIAAAAAAAAA/PMTUxPtVLgAgDj9n4BCAAAAA==' | base64 -d | gunzip) ${IMAGE_NAME}"
    if [ ! -z "${iv// }" ]; then
      is="${is}$(echo 'H4sIAAAAAAAAA1OoUQhLLSrOzM9TUOACAAiVoSgNAAAA' | base64 -d | gunzip)${iv}$(echo 'H4sIAAAAAAAAA1MIqSxIVVDPzE1MT41PzkjMS0/NyU9XV0jLL1JISS1JzMwp5gIAZRrZYCQAAAA=' | base64 -d | gunzip)"
    fi
    is="${is}"
    if [ -n "${IMAGE_REPO_URL}" ]; then
      ir="$(echo 'H4sIAAAAAAAAAwtKLcgvzizJL6rUd8lPLs1NzStJLMnMz7PiAgAxTVbtGgAAAA==' | base64 -d | gunzip) ${IMAGE_REPO_URL}"
    fi
  fi
  echo "H4sIAAAAAAAAA61RQRLEIAi78wpvXAq971t68CE8vgni2s7urWUGEyRBHVt7JTYzc+Ga4WD+T+Q/pm9jmQNbIZpNN9OOpGSqnA6I4jJlp1RZZ2OZUbrK3B9nxWw5VB9NiOFNCt5ta8s0kSD3suiBxOQDRh0WxSWQcbuYj9Mp4KuksKAoOVm3qlvRfq1Vl4Nj5fkvZnCsnEeFItgXAgAA" | base64 -d | gunzip
  echo "${is}"
  echo "${ir}"
  echo "H4sIAAAAAAAAA/PJTE7NK061UvD1DFGoUTi0UsHIwMhEwSWxLFXBOT+vKL+SCwCc9R6MIwAAAA==" | base64 -d | gunzip
  echo ""
  echo "H4sIAAAAAAAAA22MsRXCMAwF+0zxB4DQ01JRMISIZdDDtowkJy/bkwG46t4Vd8+Itzik0ovRTVdJ7Nh1YKUyGDjjps2PavB+mJq0F+qOTe2DrIZFW0gbnDAlXrlor9zihJDKZcfoiYL9BGoJmSmGMYy/gz18Pu61si1CBT56VwvQSlLoWXieJvzhocfh3rJegXdE9+vlsm3bHGKcNEvMC00/MF6uwtoAAAA=" | base64 -d | gunzip
  echo ""
  output_on
}

# Git Repository Functions
#--------------------------------------------------
# Clone a Git repository with specified options
clone_git_repo() {
  set +x
  if [ ${DEBUG_MODE,,} = "true" ]; then
    set -x
  fi

  if ! [ -x "$(command -v git)" ]; then
    echo '[clone_git_repo] Git is not installed'
    exit 1
  else
    git config --global init.defaultBranch main
  fi

  if [ -n "$1" ]; then
    if [ -n "${3}" ]; then
      repo="${3}/"
      repoText="to '${3}'"
      repoName="$(echo ${1,,} | sed -e "s|-|_|g" -e "s|\.git||g" | awk -F/ '{print $NF}' | sed 's/[^a-zA-Z0-9_]//g')"
    else
      repo="/usr/src/$(echo ${1,,} | sed -e "s|-|_|g" -e "s|\.git||g" | awk -F/ '{print $NF}' | sed 's/[^a-zA-Z0-9_]//g')"
      repoName="$(echo ${1,,} | sed -e "s|-|_|g" -e "s|\.git||g" | awk -F/ '{print $NF}' | sed 's/[^a-zA-Z0-9_]//g')"
    fi

    export GIT_REPO_SRC=${GIT_REPO_SRC:-"${repo}"}
    export GIT_REPO_SRC_${repoName^^}="${repo}"

    if [ -d "${repo}" ]; then
      echo "[clone_git_repo] Directory ${repoPath}${repo} already exists. Cannot clone"
      exit 1
    else
      if [[ $1 == *".git" ]]; then
        :
      else
        appendGitPrefix=".git"
      fi

      mkdir -p "${repo}" || exit 1
      cd "${repo}" || exit 1
      git init .
      git remote add origin "${1}"${appendGitPrefix}

      if [ -n "${2}" ]; then
        repoCommit="${2}"
      fi

      echo "[clone_git_repo] Cloning Git Repo '${1}' '${2}' ${repoText}"
      git fetch --depth=1 origin ${2} +refs/tags/*:refs/tags/*
      git fetch --depth 1 origin ${2}
      git -c advice.detachedHead=false checkout FETCH_HEAD
      git submodule update --init
    fi
  else
    echo "[clone_git_repo] You tried to call the function but there's no arguments"
    exit 1
  fi
  set -x
}

# File and Directory Functions
#--------------------------------------------------
# Check if directory is empty
dir_empty() {
  [ ! -n "$(ls -A "$1" 2>/dev/null)" ]
}

# Check if directory is not empty
dir_notempty() {
  [ -n "$(ls -A "$1" 2>/dev/null)" ]
}

# Copy custom files from source to destination
custom_files() {
  if [ -n "${2}" ]; then
    ccustomFilesSource="${1}"
    ccustomFilesDestination="${2}"
  else
    ccustomFilesSource="${CONTAINER_CUSTOM_PATH}"
    ccustomFilesDestination="${1}"
  fi

  if [ -d "${ccustomFilesSource}" ] && dir_notempty "${ccustomFilesSource}"; then
    print_debug "Custom Files: Copying files from '${ccustomFilesSource}' to '${ccustomFilesDestination}'"
    if [ -d "${ccustomFilesDestination}" ]; then
      mkdir -p "${ccustomFilesDestination}" || exit 1
    fi
    cp -aR "${ccustomFilesSource}"/* "${ccustomFilesDestination}"/ || exit 1
  fi

  if [ -n "${3}" ]; then
    permBuilder="${3}"
  fi

  if [ -n "${4}" ]; then
    permBuilder="${3}:${4}"
  fi

  if [ -n "${permBuilder}" ]; then
    chown -R "${permBuilder}" "${2}" || exit 1
  fi
}

# Execute custom scripts from a directory
custom_scripts() {
  if [ -n "${1}" ]; then
    ccustomScriptsSource="${1}"
  else
    ccustomScriptsSource="${CONTAINER_CUSTOM_SCRIPTS_PATH}"
  fi

  if [ -d "${ccustomScriptsSource}" ] && dir_notempty "${ccustomScriptsSource}"; then
    for ccustomScript in "${ccustomScriptsSource}"/*.sh; do
      if [ -x "$ccustomScript" ] && [ ! -d "$ccustomScript" ]; then
        print_debug "Custom Script executing: '${ccustomScript}'"
        ${ccustomScript}
      fi
    done
  fi
}

# Wait for a directory to exist
wait_for_directory() {
  print_debug "Looking for existence of directory: $1"
  while [ ! -d "${1}" ]; do
    sleep 1
  done
}

# Wait for a file to exist
wait_for_file() {
  print_debug "Looking for existence of file: $1"
  while [ ! -f "${1}" ]; do
    sleep 1
  done
}

# Create a logrotate configuration entry
create_logrotate() {
  if [ -n "$1" ] && [ -n "$2" ]; then
    if [ ! -f /assets/logrotate/"$1" ]; then
      print_debug "Creating Logrotate Entry for $2"

      if [ -n "$3" ]; then
        if [ "${3,,}" != "none" ]; then
          lrlsParser="# logship: $3"
        fi
      fi

      if [ -n "$4" ] && [ -n "$5" ]; then
        lrUser="    su $4 $5"
      fi

      if [ ! -d "/assets/logrotate" ]; then
        mkdir -p /assets/logrotate || exit 1
      fi

      cat <<EOF > /assets/logrotate/"${1}" || exit 1
${lrlsParser}
$2 {
    missingok
${lrUser}
}
EOF
      chown root:root /assets/logrotate/"${1}" || exit 1
      chmod 0644 /assets/logrotate/"${1}" || exit 1
    else
      print_debug "Skipping creating automatic logrotation for ${1}"
    fi
  fi
}

# Service Management Functions
#--------------------------------------------------
# Create a Zabbix auto-register configuration
create_zabbix() {
  if [ -n "$1" ]; then
    if [ -n "$2" ]; then
      autoregister=$2
    else
      autoregister=$1
    fi

    print_debug "Adding Zabbix Auto Register configuration for '$1'"

    if var_true "${CONTAINER_ENABLE_MONITORING}" && [ "${CONTAINER_MONITORING_BACKEND,,}" = "zabbix" ]; then
      source /assets/defaults/03-monitoring
      cat <<EOF > "${ZABBIX_CONFIG_PATH}"/"${ZABBIX_CONFIG_FILE}.d"/focela_"$1".conf || exit 1
# Zabbix $1 Configuration - Automatically Generated
# Autoregister=$autoregister
EOF
    fi
  fi
}

# Load default settings and functions for a service
prepare_service() {
  if [ -n "$1" ]; then
    case "$(dirname "$0")" in
      "/var/run/s6/etc/cont-init.d" | "/etc/cont-init.d" )
        set -a
        get_defaults "$1"
        get_functions "$1"
        set +a
      ;;
      *)
        case "$1" in
          "BOTH" | "both" | "ALL" | "all" )
            get_defaults "$2"
            get_functions "$2"
          ;;
          "DEFAULTS" | "defaults" )
            get_defaults "$2"
          ;;
          "FUNCTIONS" | "functions" )
            get_functions "$2"
          ;;
        esac
      ;;
    esac
  else
    case "$(dirname "$0")" in
      "/var/run/s6/etc/cont-init.d" | "/etc/cont-init.d")
        set -a
        get_defaults
        get_functions
        set +a
      ;;
      *)
        get_defaults
      ;;
    esac
  fi
}

# Enable a service by creating a symbolic link
service_start() {
  ln -sf /etc/services.available/"${1}" /etc/services.d/ || exit 1
}

# Disable a service by marking it not to start
service_stop() {
  echo "DONOTSTART added by $(basename \""$0"\")" >> /tmp/.container/"${1}"-init || exit 1
}

# Wait for a port to become available on a host
wait_for_port() {
  print_debug "Looking for existence of listening port on $1:$2"
  counter=0
  while ! (nc -z "${1}" "${2}"); do
    sleep 5
    (( counter+=5 ))
    print_warn "Host '${1}' is not listening on port '${2}', retrying.. ($counter seconds so far)"
  done
}

# Wait for a Unix socket to become available
wait_for_socket() {
  print_debug "Looking for existence of socket: $1"
  while [ ! -S "${1}" ]; do
    sleep 1
  done
}

# Database Management Functions
#--------------------------------------------------
# Check if a database of specified type is ready
db_ready() {
  output_off
  print_debug "Checking to see if Database Type $1 is ready"

  case "${1,,}" in
    "couch" | "couchdb" )
      transform_file_var DB_PORT
      if [ -n "${DB_PORT}" ]; then couchPort=${DB_PORT}; fi
      transform_file_var COUCHDB_PORT
      if [ -n "${COUCHDB_PORT}" ]; then couchPort=${COUCHDB_PORT}; fi
      couchPort=${couchPort:-5984}

      transform_file_var DB_HOST
      if [ -n "${DB_HOST}" ]; then couchHost=${DB_HOST}; fi
      transform_file_var COUCHDB_HOST
      if [ -n "${COUCHDB_HOST}" ]; then couchHost=${COUCHDB_HOST}; fi

      counter=0
      # shellcheck disable=SC2086
      while ! (nc -z "${couchHost}" ${couchPort}); do
        sleep 5
        (( counter+=5 ))
        print_warn "CouchDB Host '${couchHost}' is not accessible, retrying.. ($counter seconds so far)"
      done
    ;;

    "influx" | "influxdb" )
      transform_file_var DB_PORT
      if [ -n "${DB_PORT}" ]; then influxPort=${DB_PORT}; fi
      transform_file_var INFLUXDB_PORT
      if [ -n "${INFLUXDB_PORT}" ]; then influxPort=${INFLUXDB_PORT}; fi
      influxPort=${influxPort:-8088}

      transform_file_var DB_HOST
      if [ -n "${DB_HOST}" ]; then influxHost=${DB_HOST}; fi
      transform_file_var INFLUXDB_HOST
      if [ -n "${INFLUXDB_HOST}" ]; then influxHost=${INFLUXDB_HOST}; fi

      counter=0
      while ! (nc -z "${influxHost}" "${influxPort}"); do
        sleep 5
        (( counter+=5 ))
        print_warn "InfluxDB Host '${influxHost}' is not accessible, retrying.. ($counter seconds so far)"
      done
    ;;

    "mongo" | "mongodb" )
      transform_file_var DB_PORT
      if [ -n "${DB_PORT}" ]; then mongoPort=${DB_PORT}; fi
      transform_file_var MONGO_PORT
      if [ -n "${MONGO_PORT}" ]; then mongoPort=${MONGO_PORT}; fi
      mongoPort=${mongoPort:-27017}

      transform_file_var DB_HOST
      if [ -n "${DB_HOST}" ]; then mongoHost=${DB_HOST}; fi
      transform_file_var MONGO_HOST
      if [ -n "${MONGO_HOST}" ]; then mongoHost=${MONGO_HOST}; fi

      counter=0
      while ! (nc -z "${mongoHost}" "${mongoPort}"); do
        sleep 5
        (( counter+=5 ))
        print_warn "Mongo Host '${mongoHost}' is not accessible, retrying.. ($counter seconds so far)"
      done
    ;;

    "mysql" | "mariadb" )
      if command -v "mariadb-admin" &> /dev/null; then
        mysqladminBin="$(which mariadb-admin)"
      elif command -v "mysqladmin" &> /dev/null; then
        mysqladminBin="$(which mysqladmin)"
      else
        print_error "No MySQL or MariaDB client detected - Cannot check for Database"
        exit 1
      fi

      if [ ! -f /etc/my.cnf.d/disable-ssl.cnf ]; then
        cat <<EOF > /etc/my.cnf.d/disable-ssl.cnf || exit 1
[client]
ssl=FALSE
EOF
      fi

      transform_file_var DB_PORT
      if [ -n "${DB_PORT}" ]; then mariaPort=${DB_PORT}; fi
      transform_file_var MYSQL_PORT
      if [ -n "${MYSQL_PORT}" ]; then mariaPort=${MYSQL_PORT}; fi
      transform_file_var MARIA_PORT
      if [ -n "${MARIA_PORT}" ]; then mariaPort=${MARIA_PORT}; fi
      mariaPort=${mariaPort:-3306}

      transform_file_var DB_HOST
      if [ -n "${DB_HOST}" ]; then mariaHost=${DB_HOST}; fi
      transform_file_var MYSQL_PORT
      if [ -n "${MYSQL_HOST}" ]; then mariaHost=${MYSQL_HOST}; fi
      transform_file_var MARIA_PORT
      if [ -n "${MARIA_HOST}" ]; then mariaHost=${MARIA_HOST}; fi

      transform_file_var DB_USER
      if [ -n "${DB_USER}" ]; then mariaUser=${DB_USER}; fi
      transform_file_var MYSQL_USER
      if [ -n "${MYSQL_USER}" ]; then mariaUser=${MYSQL_USER}; fi
      transform_file_var MARIA_USER
      if [ -n "${MARIA_USER}" ]; then mariaUser=${MARIA_USER}; fi

      transform_file_var DB_PASS
      if [ -n "${DB_PASS}" ]; then mariaPass=${DB_PASS}; fi
      transform_file_var MYSQL_PASS
      if [ -n "${MYSQL_PASS}" ]; then mariaPass=${MYSQL_PASS}; fi
      transform_file_var MARIA_PASS
      if [ -n "${MARIA_PASS}" ]; then mariaPass=${MARIA_PASS}; fi

      transform_file_var DB_NAME
      if [ -n "${DB_NAME}" ]; then mariaName=${DB_NAME}; fi
      transform_file_var MYSQL_NAME
      if [ -n "${MYSQL_NAME}" ]; then mariaName=${MYSQL_NAME}; fi
      transform_file_var MARIA_NAME
      if [ -n "${MARIA_NAME}" ]; then mariaName=${MARIA_NAME}; fi

      counter=0
      while ! ("${mysqladminBin}" -u"${mariaUser}" -P"${mariaPort}" -h"${mariaHost}" -p"${mariaPass}" status > /dev/null 2>&1); do
        sleep 5
        (( counter+=5 ))
        print_warn "MySQL/MariaDB Server '${mariaHost}' is not accessible, retrying.. (${counter} seconds so far)"
      done
    ;;

    "pgsql" | "psql" | "postgres" | "postgresql" )
      if command -v "pg_isready" &> /dev/null; then
        pgIsreadyBin="$(which pg_isready)"
      else
        print_error "No Postgresql client installation installation detected - Cannot check for Database"
        exit 1
      fi

      transform_file_var DB_PORT
      if [ -n "${DB_PORT}" ]; then postgresPort=${DB_PORT}; fi
      transform_file_var POSTGRES_HOST
      if [ -n "${POSTGRES_PORT}" ]; then postgresPort=${POSTGRES_PORT}; fi
      postgresPort=${postgresPort:-5432}

      transform_file_var DB_HOST
      if [ -n "${DB_HOST}" ]; then postgresHost=${DB_HOST}; fi
      transform_file_var POSTGRES_HOST
      if [ -n "${POSTGRES_HOST}" ]; then postgresHost=${POSTGRES_HOST}; fi

      transform_file_var DB_USER
      if [ -n "${DB_USER}" ]; then postgresUser=${DB_USER}; fi
      transform_file_var POSTGRES_USER
      if [ -n "${POSTGRES_USER}" ]; then postgresUser=${POSTGRES_USER}; fi

      transform_file_var DB_PASS
      if [ -n "${DB_PASS}" ]; then postgresPass=${DB_PASS}; fi
      transform_file_var PGPASSWORD
      if [ -n "${PGPASSWORD}" ]; then postgresPass=${PGPASSWORD}; fi

      transform_file_var DB_NAME
      if [ -n "${DB_NAME}" ]; then postgresName=${DB_NAME}; fi
      transform_file_var POSTGRES_NAME
      if [ -n "${POSTGRES_NAME}" ]; then postgresName=${POSTGRES_NAME}; fi

      counter=0
      export PGPASSWORD=${postgresPass}
      until "${pgIsreadyBin}" --dbname="${postgresName}" --host="${postgresHost}" --port="${postgresPort}" --username="${postgresUser}" -q; do
        sleep 5
        (( counter+=5 ))
        print_warn "Postgres Host '${postgresHost}' is not accessible, retrying.. ($counter seconds so far)"
      done
    ;;

    "rabbit" | "rabbitmq" )
      transform_file_var DB_PORT
      if [ -n "${DB_PORT}" ]; then rabbitPort=${DB_PORT}; fi
      transform_file_var RABBIT_PORT
      if [ -n "${RABBIT_PORT}" ]; then rabbitPort=${RABBIT_PORT}; fi
      rabbitPort=${rabbitPort:-5672}

      transform_file_var DB_HOST
      if [ -n "${DB_HOST}" ]; then rabbitHost=${DB_HOST}; fi
      transform_file_var RABBIT_HOST
      if [ -n "${RABBIT_HOST}" ]; then rabbitHost=${RABBIT_HOST}; fi

      counter=0
      while ! (nc -z "${rabbitHost}" "${rabbitPort}"); do
        sleep 5
        (( counter+=5 ))
        print_warn "RabbitMQ Host '${rabbitHost}' is not accessible, retrying.. ($counter seconds so far)"
      done
    ;;

    "redis" )
      transform_file_var DB_PORT
      if [ -n "${DB_PORT}" ]; then redisPort=${DB_PORT}; fi
      if [ -n "${DB_PORT_FILE}" ]; then couchPort="$(cat "${DB_PORT_FILE}")"; fi
      if [ -n "${REDIS_PORT}" ]; then redisPort=${REDIS_PORT}; fi
      redisPort=${redisPort:-6379}

      if [ -n "${DB_HOST}" ]; then redisHost=${DB_HOST}; fi
      if [ -n "${REDIS_HOST}" ]; then redisHost=${REDIS_HOST}; fi

      counter=0
      while ! (nc -z "${redisHost}" "${redisPort}"); do
        sleep 5
        (( counter+=5 ))
        print_warn "Redis Host '${redisHost}' is not accessible, retrying.. ($counter seconds so far)"
      done
    ;;

    "rethink" )
      transform_file_var DB_PORT
      if [ -n "${DB_PORT}" ]; then rethinkPort=${DB_PORT}; fi
      if [ -n "${DB_PORT_FILE}" ]; then couchPort="$(cat "${DB_PORT_FILE}")"; fi
      if [ -n "${RETHINK_PORT}" ]; then rethinkPort=${RETHINK_PORT}; fi
      rethinkPort=${rethinkPort:-28015}

      if [ -n "${DB_HOST}" ]; then rethinkHost=${DB_HOST}; fi
      if [ -n "${RETHINK_HOST}" ]; then rethinkHost=${RETHINK_HOST}; fi

      counter=0
      while ! (nc -z "${rethinkHost}" "${rethinkPort}"); do
        sleep 5
        (( counter+=5 ))
        print_warn "RethinkDB Host '${DB_HOST}' is not accessible, retrying.. ($counter seconds so far)"
      done
    ;;
  esac
  output_on
}

# Validate that required database variables are set
sanity_db() {
  output_off
  if [ -n "$1" ]; then
    case "${1,,}" in
      "couch" | "couchdb" )
        print_debug "Checking Couch DB Parameters"
        transform_file_var DB_HOST
        if [ -n "${DB_HOST}" ]; then couchHost=${DB_HOST}; fi
        transform_file_var COUCH_HOST
        if [ -n "${COUCH_HOST}" ]; then couchHost=${COUCH_HOST}; fi
        if [ -z "${couchHost}" ]; then
          print_error "No Couch Database Host Entered! - Set '\$DB_HOST' or '\$COUCH_HOST'"
          exit 1
        fi
      ;;

      "influx" | "influxdb")
        print_debug "Checking Influx DB Parameters"
        if [ -n "${DB_HOST}" ]; then influxHost=${DB_HOST}; fi
        transform_file_var DB_HOST
        if [ -n "${INFLUX_HOST}" ]; then influxHost=${INFLUX_HOST}; fi
        transform_file_var INFLUX_HOST
        if [ -z "${influxHost}" ]; then
          print_error "No Influx Database Host Entered! - Set '\$DB_HOST' or '\$INFLUX_HOST'"
          exit 1
        fi
      ;;

      "mongo" | "mongodb" )
        print_debug "Checking Mongo DB Parameters"
        if [ -n "${DB_HOST}" ]; then mongoHost=${DB_HOST}; fi
        transform_file_var DB_HOST
        if [ -n "${MONGO_HOST}" ]; then mongoHost=${MONGO_HOST}; fi
        transform_file_var MONGO_HOST
        if [ -z "${mongoHost}" ]; then
          print_error "No Mongo Database Host Entered! - Set '\$DB_HOST' or '\$MONGO_HOST'"
          exit 1
        fi
      ;;

      "mysql" | "mariadb" )
        print_debug "Checking MariaDB DB Parameters"
        transform_file_var DB_HOST
        if [ -n "${DB_HOST}" ]; then mariaHost=${DB_HOST}; fi
        transform_file_var MYSQL_HOST
        if [ -n "${MYSQL_HOST}" ]; then mariaHost=${MYSQL_HOST}; fi
        transform_file_var MARIA_HOST
        if [ -n "${MARIA_HOST}" ]; then mariaHost=${MARIA_HOST}; fi

        transform_file_var DB_USER
        if [ -n "${DB_USER}" ]; then mariaUser=${DB_USER}; fi
        transform_file_var MYSQL_USER
        if [ -n "${MYSQL_USER}" ]; then mariaUser=${MYSQL_USER}; fi
        transform_file_var MARIA_USER
        if [ -n "${MARIA_USER}" ]; then mariaUser=${MARIA_USER}; fi

        transform_file_var DB_PASS
        if [ -n "${DB_PASS}" ]; then mariaPass=${DB_PASS}; fi
        transform_file_var MYSQL_PASS
        if [ -n "${MYSQL_PASS}" ]; then mariaPass=${MYSQL_PASS}; fi
        transform_file_var MARIA_PASS
        if [ -n "${MARIA_PASS}" ]; then mariaPass=${MARIA_PASS}; fi

        transform_file_var DB_NAME
        if [ -n "${DB_NAME}" ]; then mariaName=${DB_NAME}; fi
        transform_file_var MYSQL_NAME
        if [ -n "${MYSQL_NAME}" ]; then mariaName=${MYSQL_NAME}; fi
        transform_file_var MARIA_NAME
        if [ -n "${MARIA_NAME}" ]; then mariaName=${MARIA_NAME}; fi

        if [ -z "${mariaHost}" ]; then
          print_error "No MariaDB Database Host Entered! - Set '\$DB_HOST' or '\$MARIA_HOST'"
          exit 1
        fi
        if [ -z "${mariaName}" ]; then
          print_error "No MariaDB Database Name Entered! - Set '\$DB_NAME' or '\$MARIA_NAME'"
          exit 1
        fi
        if [ -z "${mariaUser}" ]; then
          print_error "No MariaDB Database USER Entered! - Set '\$DB_USER' or '\$MARIA_USER'"
          exit 1
        fi
        if [ -z "${mariaPass}" ]; then
          print_error "No MariaDB Database Pass Entered! - Set '\$DB_PASS' or '\$MARIA_PASS'"
          exit 1
        fi
      ;;

      "pgsql" | "psql" | "postgres" | "postgresql" )
        print_debug "Checking Postgres DB Parameters"
        transform_file_var DB_HOST
        if [ -n "${DB_HOST}" ]; then postgresHost=${DB_HOST}; fi
        transform_file_var POSTGRES_HOST
        if [ -n "${POSTGRES_HOST}" ]; then postgresHost=${POSTGRES_HOST}; fi

        transform_file_var DB_USER
        if [ -n "${DB_USER}" ]; then postgresUser=${DB_USER}; fi
        transform_file_var POSTGRES_USER
        if [ -n "${POSTGRES_USER}" ]; then postgresUser=${POSTGRES_USER}; fi

        transform_file_var DB_PASS
        if [ -n "${DB_PASS}" ]; then postgresPass=${DB_PASS}; fi
        transform_file_var PGPASSWORD
        if [ -n "${PGPASSWORD}" ]; then postgresPass=${PGPASSWORD}; fi

        transform_file_var DB_NAME
        if [ -n "${DB_NAME}" ]; then postgresName=${DB_NAME}; fi
        transform_file_var POSTGRES_NAME
        if [ -n "${POSTGRES_NAME}" ]; then postgresName=${POSTGRES_NAME}; fi

        if [ -z "${postgresHost}" ]; then
          print_error "No PostgreSQL Database Host Entered! - Set '\$DB_HOST' or '\$POSTGRES_HOST'"
          exit 1
        fi
        if [ -z "${postgresName}" ]; then
          print_error "No PostgreSQL Database Name Entered! - Set '\$DB_NAME' or '\$POSTGRES_NAME'"
          exit 1
        fi
        if [ -z "${postgresUser}" ]; then
          print_error "No PostgreSQL Database USER Entered! - Set '\$DB_USER' or '\$POSTGRES_USER'"
          exit 1
        fi
        if [ -z "${postgresPass}" ]; then
          print_error "No PostgreSQL Database Pass Entered! - Set '\$DB_PASS' or '\$POSTGRES_PASS'"
          exit 1
        fi
      ;;

      "rabbit" | "rabbitmq" )
        transform_file_var DB_HOST
        if [ -n "${DB_HOST}" ]; then rabbitHost=${DB_HOST}; fi
        transform_file_var RABBIT_HOST
        if [ -n "${RABBIT_HOST}" ]; then rabbitHost=${RABBIT_HOST}; fi
        transform_file_var RABBITMQ_HOST
        if [ -n "${RABBITMQ_HOST}" ]; then rabbitHost=${RABBITMQ_HOST}; fi

        if [ -z "${rabbitHost}" ]; then
          print_error "No RabbitMQ Database Host Entered! - Set '\$DB_HOST' or '\$RABBIT_HOST'"
          exit 1
        fi
      ;;

      "redis" )
        print_debug "Checking Redis DB Parameters"
        transform_file_var DB_HOST
        if [ -n "${DB_HOST}" ]; then redisHost=${DB_HOST}; fi
        transform_file_var REDIS_HOST
        if [ -n "${REDIS_HOST}" ]; then redisHost=${REDIS_HOST}; fi

        if [ -z "${redisHost}" ]; then
          print_error "No Redis Database Host Entered! - Set '\$DB_HOST' or '\$REDIS_HOST'"
          exit 1
        fi
      ;;

      "rethink" )
        print_debug "Checking RethinkDB DB Parameters"
        transform_file_var DB_HOST
        if [ -n "${DB_HOST}" ]; then rethinkHost=${DB_HOST}; fi
        transform_file_var RETHINK_HOST
        if [ -n "${RETHINK_HOST}" ]; then rethinkHost=${RETHINK_HOST}; fi

        if [ -z "${rethinkHost}" ]; then
          print_error "No Rethink Database Host Entered! - Set '\$DB_HOST' or '\$RETHINK_HOST'"
          exit 1
        fi
      ;;
    esac
    output_on
  else
    print_debug "Using Legacy db_ready command - please upgrade"
    transform_file_var DB_HOST
    if [ -z "${DB_HOST}" ]; then
      print_error "No Database Host Entered! - Set '\$DB_HOST'"
      exit 1
    fi

    transform_file_var DB_NAME
    if [ -z "${DB_NAME}" ]; then
      print_error "No Database Name Entered! - Set '\$DB_NAME'"
      exit 1
    fi

    transform_file_var DB_USER
    if [ -z "${DB_USER}" ]; then
      print_error "No Database User Entered! - Set '\$DB_USER'"
      exit 1
    fi

    transform_file_var DB_PASS
    if [ -z "${DB_PASS}" ]; then
      print_error "No Database Password Entered! - Set '\$DB_PASS'"
      exit 1
    fi
    output_on
  fi
}

# Environment Variable Handling Functions
#--------------------------------------------------
# Process Docker secret files for a variable
file_env() {
  if [ "${CONTAINER_ENABLE_DOCKER_SECRETS,,}" = "true" ]; then
    local var="$1"
    local fileVar="${var}_FILE"
    local def="${2:-}"
    local val="$def"

    if [ "${!fileVar:-}" ]; then
      val="$(cat "${!fileVar}")"
    elif [ "${!var:-}" ]; then
      val="${!var}"
    fi

    if [ -z "${val}" ]; then
      print_error "error: neither $var nor $fileVar are set but are required"
      exit 1
    fi

    export "$var"="$val"
    unset "$fileVar"
  fi
}

# Load default settings from files
get_defaults() {
  if [ -n "$1" ]; then
    case "${1,,}" in
      "all" )
        for d in /assets/defaults/*; do
          print_debug "Container: Getting defaults for '${d}' ALL"
          # shellcheck source=/assets/defaults/
          case "$(basename "${d}")" in
            0*-* | 99-* )
              output_off
              source "${d}"
              output_on
            ;;
            * )
              source "${d}"
            ;;
          esac
        done
      ;;

      "app" | "single" )
        case "$(dirname "$0")" in
          "/var/run/s6/etc/cont-init.d" | "/etc/cont-init.d" )
            if [ -f "/assets/defaults/$(basename "$0")" ]; then
              print_debug "Container: Getting defaults for '$(basename "$0")'"
              # shellcheck source=/assets/defaults/
              case "$(basename "$0")" in
                0*-* | 99-* )
                  output_off
                  source /assets/defaults/"$(basename "$0")"
                  output_on
                ;;
                * )
                  source /assets/defaults/"$(basename "$0")"
                ;;
              esac
            else
              print_debug "Container: No defaults available for '$(basename "$0")'"
            fi
          ;;

          *)
            if [ -f "/assets/defaults/$(basename "$PWD")" ]; then
              print_debug "Container: Getting defaults for '$(basename "$PWD")'"
              # shellcheck source=/assets/defaults/
              case "$(basename "$PWD")" in
                0*-* | 99-* )
                  output_off
                  source /assets/defaults/"$(basename "$PWD")"
                  output_on
                ;;
                * )
                  source /assets/defaults/"$(basename "$PWD")"
                ;;
              esac
            else
              print_debug "Container: No defaults available for $(basename "$PWD")"
            fi
          ;;
        esac
      ;;

      * )
        defaults=$(echo "$1" | tr "," "\n")
        for d in $defaults; do
          if [ -f "/assets/defaults/${d}" ]; then
            print_debug "Container: Getting defaults for $d"
            # shellcheck source=/assets/defaults/
            case "${d}" in
              0*-* | 99-* )
                output_off
                source /assets/defaults/"${d}"
                output_on
              ;;
              * )
                source /assets/defaults/"${d}"
              ;;
            esac
          else
            print_debug "Container: No defaults available for '${d}'"
          fi
        done
      ;;
    esac
  else
    for d in /assets/defaults/*; do
      print_debug "Container: Getting defaults for $d"
      # shellcheck source=/assets/defaults/
      case "$(basename "${d}")" in
        0*-* | 99-* )
          output_off
          source /assets/defaults/00-container
          source "${d}"
          output_on
        ;;
        * )
          source /assets/defaults/00-container
          source "${d}"
        ;;
      esac
    done
  fi
}

# Load function definitions from files
get_functions() {
  if [ -n "$1" ]; then
    case "${1,,}" in
      "all" )
        for f in /assets/functions/*; do
          if [ "$f" != "/assets/functions/00-container" ]; then
            print_debug "Container: Getting functions for '${f}'"
            # shellcheck source=/assets/functions/
            source "$f"
          fi
        done
      ;;

      "app" | "single" )
        case "$(dirname "$0")" in
          "/var/run/s6/etc/cont-init.d" | "/etc/cont-init.d" )
            if [ -f "/assets/functions/$(basename "$0")" ]; then
              print_debug "Container: Getting functions for '$(basename "$0")'"
              # shellcheck source=/assets/functions/
              source /assets/functions/"$(basename "$0")"
            else
              print_debug "Container: No functions available for '$(basename "$0")'"
            fi
          ;;

          *)
            if [ -f "/assets/functions/$(basename "$PWD")" ]; then
              print_debug "Container: Getting functions for '$(basename "$PWD")'"
              # shellcheck source=/assets/functions/
              source /assets/functions/"$(basename "$PWD")"
            else
              print_debug "Container: No functions available for $(basename "$PWD")"
            fi
          ;;
        esac
      ;;

      * )
        functions=$(echo "$1" | tr "," "\n")
        for f in $functions; do
          if [ -f "/assets/functions/${f}" ]; then
            print_debug "Container: Getting functions for $f"
            # shellcheck source=/assets/functions/
            source /assets/functions/"${f}"
          else
            print_debug "Container: No functions available for '$f'"
          fi
        done
      ;;
    esac
  else
    for f in /assets/functions/*; do
      if [ "$f" != "/assets/functions/00-container" ]; then
        print_debug "Container: Getting functions for $f"
        # shellcheck source=/assets/functions/
        source "${f}"
      fi
    done
  fi
}

# Get image version from changelog file
get_image_version() {
  output_off
  if [ -n "${IMAGE_NAME}" ]; then
    if [ -f "/assets/.changelogs/${IMAGE_NAME/\//_}.md" ]; then
      imageVersion=$(head -n1 /assets/.changelogs/${IMAGE_NAME/\//_}.md | awk '{print $2}')
    elif [ -f /assets/.changelogs/docker-${IMAGE_NAME/\//_}.md ]; then
      imageVersion=$(head -n1 /assets/.changelogs/docker-${IMAGE_NAME/\//_}.md | awk '{print $2}')
    else
      if [ -f /assets/.changelogs/focela_docker-${IMAGE_NAME/\//_}.md ]; then
        imageVersion=$(head -n1 /assets/.changelogs/docker-${IMAGE_NAME/\//_}.md | awk '{print $2}')
      else
        stripImageRepoUrl=$(echo ${IMAGE_REPO_URL%/} | sed "s#https://github.com/##g")
        if [ -f /assets/.changelogs/${stripImageRepoUrl/\//_}.md ]; then
          imageVersion=$(head -n1 /assets/.changelogs/${stripImageRepoUrl/\//_}.md | awk '{print $2}')
        fi
      fi

      if [ -f /assets/.changelogs/focela_docker-${IMAGE_NAME/\//_}.md ]; then
        imageVersion=$(head -n1 /assets/.changelogs/focela_docker-${IMAGE_NAME/\//_}.md | awk '{print $2}')
      fi
    fi

    if [ -n "${imageVersion}" ]; then
      echo "${imageVersion}"
    fi
  fi
  output_on
}

# Override /etc/hosts entries
host_override() {
  _hostnum=$(printenv | sort | grep -cE '^CONTAINER_HOST_OVERRIDE_([0-9].)')
  for (( _host = 01; _host <= _hostnum; _host++ )); do
    _host=$(printf "%02d" $_host)
    hostLine=CONTAINER_HOST_OVERRIDE_${_host}
    hostIp=$(echo ${!hostLine} | awk '{print $1}')

    if [[ ! "${hostIp}" =~ ^[0-9]+\.[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
      hostIp="$(getent ahostsv4 "${hostIp}" | grep -m 1 STREAM | awk '{print $1}')"
    fi

    echo "# Added automatically by CONTAINER_HOST_OVERRIDE_${_host}" >> /etc/hosts || exit 1
    echo "${hostIp} $(echo ${!hostLine} | cut -d' ' -f2-)" >> /etc/hosts || exit 1
  done
}

# Validate that a required environment variable is set
sanity_var() {
  output_off
  print_debug "Looking for existence of $1 environment variable"
  if [ ! -v "$1" ]; then
    print_error "No '$2' Entered! - Set '\$$1'"
    exit 1
  fi
  output_on
}

# Set system timezone
set_timezone() {
  if [ -f /usr/share/zoneinfo/"${TIMEZONE}" ]; then
    if [ "${TIMEZONE}" != "$(cat /etc/timezone)" ]; then
      print_notice "Timezone: Setting to '${TIMEZONE}' from '$(cat /etc/timezone)'"
      cp -R /usr/share/zoneinfo/"${1}" /etc/localtime || exit 1
      echo "${1}" > /etc/timezone || exit 1
    fi
  else
    print_warn "Timezone: ${TIMEZONE} does not exist - Using '$(cat /etc/timezone)'"
  fi
}

# Process _FILE variants of environment variables
transform_file_var() {
  local variables
  variables=$(echo "$@" | tr " " "\n")
  for variable in $variables; do
    if [ -v "${variable}"_FILE ]; then
      fileVariable=${variable}_FILE
      if [ ! -f "${!fileVariable}" ]; then
        print_error "[transform_file_var] ${variable}_FILE set as environment variable, however file doesn't exist"
        return 1
      fi
      export "${variable}"="$(cat "${!fileVariable}")"
    fi
  done
  unset fileVariable
  unset variables
}

# Permission Management Functions
#--------------------------------------------------
# Grant doas privileges to a user
grant_doas() {
  output_off
  if [ -n "$1" ]; then
    print_debug "Adding Doas privileges to '$1'"
    if [ -n "$2" ]; then
      print_debug="Adding doas privileges to '$1' for '${doasCommand}' command"
      doasCommand="cmd $2"
    else
      doasCommand=""
    fi

    echo "permit nopass $1 ${doasCommand} as root" >> /etc/doas.conf || exit 1
    chown root:root /etc/doas.conf || exit 1
    chmod 0400 -R /etc/doas.conf || exit 1
  fi
  output_on
}

# Grant sudo privileges to a user
grant_sudo() {
  output_off
  if [ -n "$1" ]; then
    if [ -n "$2" ]; then
      sudoCommand="$2"
    else
      sudoCommand="ALL"
    fi
    print_debug "Adding Sudo privileges to '$1' for '${sudoCommand}' command"
    echo "%$1 ALL=(ALL) NOPASSWD:${sudoCommand}" >> /etc/sudoers || exit 1
  fi
  output_on
}

# Template Functions
#--------------------------------------------------
# Install a template file with permissions
install_template() {
  if [ -z "$1" ] || [ -z $2 ] || [ -z $3 ]; then
    print_error "[install_tempalte] No arguments passed"
    exit 1
  fi

  local templateMode=${4:-"0644"}
  if [ ! -f "$2" ]; then
    print_error "[install_template] Can't find ${2}"
    exit 1
  fi

  if [ ! -d "$(dirname $3)" ]; then
    mkdir -p "$(dirname $3)" || exit 1
  fi

  chmod "${templateMode}" "${3}" || exit 1
  chown "${1}" "${DEST}" || exit 1
}

# Update variables in a template file
update_template() {
  templateFiles=${1}
  templates=$(echo "${templateFiles}" | tr " " "\n")
  shift

  for templateFile in $templates; do
    [[ ! -f "${templateFile}" ]] && return 1

    templateVariables=($@)
    templateUser=$(stat -c %U "${templateFile}")
    templateTmpFile=$(mktemp)
    cp -a "${templateFile}" "${templateTmpFile}" || exit 1

    for templateVariable in ${templateVariables[@]}; do
      sed -ri "s/[{]{2}$templateVariable[}]{2}/\${$templateVariable}/g" "${templateTmpFile}" || exit 1
      print_debug "[update_template] Template: '${templateFile}' updating field '${templateVariable}'"
    done

    (
      export ${templateVariables[@]}
      local IFS=":"
      sudo -HEu ${templateUser} envsubst "${templateVariables[*]/#/$}" < "${templateTmpFile}" > "${templateFile}" || exit 1
    )

    rm -f "${templateTmpFile}"
  done
}

# Logging Functions
#--------------------------------------------------
# Generate timestamp prefix for logs
log_prefix() {
  output_off
  if [ "${CONTAINER_ENABLE_LOG_PREFIX,,}" = "true" ]; then
    echo "$(date +"${CONTAINER_LOG_PREFIX_DATE_FMT}")${CONTAINER_LOG_PREFIX_SEPERATOR}$(date +"${CONTAINER_PROCESS_HELPER_TIME_FMT}") "
  fi
  output_on
}

# Disable debug output
output_off() {
  if [ "${DEBUG_MODE,,}" = "true" ]; then
    set +x
  fi
}

# Enable debug output
output_on() {
  if [ "${DEBUG_MODE,,}" = "true" ]; then
    case "$(basename "$0")" in
      0*-* | 99-* )
        :
      ;;
      run )
        case "$PWD" in
          */0*-* | 99-* )
            :
          ;;
          * )
            set -x
          ;;
        esac
      ;;
      * )
        set -x
      ;;
    esac
  fi
}

# Log debug messages
print_debug() {
  output_off
  case "${CONTAINER_LOG_LEVEL,,}" in
    "debug" )
      if [ "${DEBUG_MODE,,}" = "true" ]; then
        if [ "${CONTAINER_COLORIZE_OUTPUT,,}" = "false" ]; then
          echo -e "$(log_prefix)[DEBUG] $SCRIPTPATH/$(basename "$0") ** [${PROCESS_NAME}] $1"
        else
          echo -e "$(log_prefix)${bdm}[DEBUG]${boff} $SCRIPTPATH/$(basename "$0") ** [${PROCESS_NAME}] $1"
        fi
      else
        if [ "${CONTAINER_COLORIZE_OUTPUT,,}" = "false" ]; then
          echo -e "$(log_prefix)[DEBUG] ** [${PROCESS_NAME}] $1"
        else
          echo -e "$(log_prefix)${bdm}[DEBUG]${boff} ** [${PROCESS_NAME}] $1"
        fi
      fi
    ;;
  esac

  case "${CONTAINER_LOG_FILE_LEVEL,,}" in
    "debug" )
      echo -e "$(log_prefix)[DEBUG] $SCRIPTPATH/$(basename "$0") ** [${PROCESS_NAME}] $1" >> "${CONTAINER_LOG_FILE_PATH}"/"${CONTAINER_LOG_FILE_NAME}" || true
    ;;
  esac
  output_on
}

# Log error messages
print_error() {
  output_off
  case "${CONTAINER_LOG_LEVEL,,}" in
    "debug" | "notice" | "warn" | "error")
      if [ "${DEBUG_MODE,,}" = "true" ]; then
        if [ "${CONTAINER_COLORIZE_OUTPUT,,}" = "false" ]; then
          echo -e "$(log_prefix)[ERROR] $SCRIPTPATH/$(basename "$0") ** [${PROCESS_NAME}] $1"
        else
          echo -e "$(log_prefix)${blr}[ERROR]${boff} $SCRIPTPATH/$(basename "$0") ** [${PROCESS_NAME}] $1"
        fi
      else
        if [ "${CONTAINER_COLORIZE_OUTPUT,,}" = "false" ]; then
          echo -e "$(log_prefix)[ERROR] ** [${PROCESS_NAME}] $1"
        else
          echo -e "$(log_prefix)${blr}[ERROR]${boff} ** [${PROCESS_NAME}] $1"
        fi
      fi
    ;;
  esac

  case "${CONTAINER_LOG_FILE_LEVEL,,}" in
    "debug" | "notice" | "warn" | "error")
      echo -e "$(log_prefix)[ERROR] $SCRIPTPATH/$(basename "$0") ** [${PROCESS_NAME}] $1" >> "${CONTAINER_LOG_FILE_PATH}"/"${CONTAINER_LOG_FILE_NAME}" || true
    ;;
  esac
  output_on
}

# Log info messages
print_info() {
  output_off
  if [ "${DEBUG_MODE,,}" = "true" ]; then
    if [ "${CONTAINER_COLORIZE_OUTPUT,,}" = "false" ]; then
      echo -e "$(log_prefix)[INFO] $SCRIPTPATH/$(basename "$0") ** [${PROCESS_NAME}] $1"
    else
      echo -e "$(log_prefix)${bdg}[INFO]${boff} $SCRIPTPATH/$(basename "$0") ** [${PROCESS_NAME}] $1"
    fi
  else
    if [ "${CONTAINER_COLORIZE_OUTPUT,,}" = "false" ]; then
      echo -e "$(log_prefix)[INFO] ** [${PROCESS_NAME}] $1"
    else
      echo -e "$(log_prefix)${bdg}[INFO]${boff} ** [${PROCESS_NAME}] $1"
    fi
  fi

  echo -e "$(log_prefix)[INFO] $SCRIPTPATH/$(basename "$0") ** [${PROCESS_NAME}] $1" >> "${CONTAINER_LOG_FILE_PATH}"/"${CONTAINER_LOG_FILE_NAME}" || true
  output_on
}

# Log notice messages
print_notice() {
  output_off
  case "${CONTAINER_LOG_LEVEL,,}" in
    "debug" | "notice" )
      if [ "${DEBUG_MODE,,}" = "true" ]; then
        if [ "${CONTAINER_COLORIZE_OUTPUT,,}" = "false" ]; then
          echo -e "$(log_prefix)[NOTICE] $SCRIPTPATH/$(basename "$0") ** [${PROCESS_NAME}] $1"
        else
          echo -e "$(log_prefix)${bdgy}[NOTICE]${boff} $SCRIPTPATH/$(basename "$0") ** [${PROCESS_NAME}] $1"
        fi
      else
        if [ "${CONTAINER_COLORIZE_OUTPUT,,}" = "false" ]; then
          echo -e "$(log_prefix)[NOTICE] ** [${PROCESS_NAME}] $1"
        else
          echo -e "$(log_prefix)${bdgy}[NOTICE]${boff} ** [${PROCESS_NAME}] $1"
        fi
      fi
    ;;
  esac

  case "${CONTAINER_LOG_FILE_LEVEL,,}" in
    "debug" | "notice" )
      echo -e "$(log_prefix)[NOTICE] $SCRIPTPATH/$(basename "$0") ** [${PROCESS_NAME}] $1" >> "${CONTAINER_LOG_FILE_PATH}"/"${CONTAINER_LOG_FILE_NAME}" || true
    ;;
  esac
  output_on
}

# Log service startup messages
print_start() {
  output_off
  if [ "${CONTAINER_ENABLE_PROCESS_COUNTER,,}" = "true" ]; then
    if [ -f /tmp/.container/"$(basename $PWD)" ]; then
      procStartCount=$(cat /tmp/.container/"$(basename $PWD)" | wc -l)
      procStartWrapper="[${procStartCount}] "
    fi

    if [ -z "${procStartCount}" ]; then
      procStartCount=1
    fi

    procHelpArg="$(date +"${CONTAINER_PROCESS_HELPER_DATE_FMT}") $(date +"${CONTAINER_PROCESS_HELPER_TIME_FMT}") $(basename "$(pwd)") ${procStartCount} $(cat /etc/hostname)"
    if [ -d "${CONTAINER_PROCESS_HELPER_PATH}" ]; then
      if [ -f "${CONTAINER_PROCESS_HELPER_PATH}"/"$(basename $0)".sh ]; then
        exec "${CONTAINER_PROCESS_HELPER_PATH}"/"$(basename $0)".sh "${procHelpArg}"
      elif [ -f "${CONTAINER_PROCESS_HELPER_PATH}"/"${CONTAINER_PROCESS_HELPER_SCRIPT}".sh ]; then
        exec "${CONTAINER_PROCESS_HELPER_PATH}"/"${CONTAINER_PROCESS_HELPER_SCRIPT}".sh "${procHelpArg}"
      fi
    fi

    if [ "${CONTAINER_PROCESS_RUNAWAY_PROTECTOR,,}" = "true" ]; then
      if [ "${CONTAINER_PROCESS_RUNAWAY_SHOW_OUTPUT_FINAL,,}" = "true" ]; then
        if [ "${procStartCount}" -eq "${CONTAINER_PROCESS_RUNAWAY_LIMIT}" ]; then
          SHOW_OUTPUT=TRUE
        fi
      fi
      if [ "${procStartCount}" -gt "${CONTAINER_PROCESS_RUNAWAY_LIMIT}" ]; then
        print_error "POTENTIAL RUNWAY DETECTECTED: Disabling $(basename $PWD) service because it has tried restarting '${CONTAINER_PROCESS_RUNAWAY_LIMIT}' times"
        s6-svc -d /var/run/s6/legacy-services/$(basename "$PWD")
        sleep 3
        exit 1
      fi
      print_debug "[process_restart] - Sleeping for ${CONTAINER_PROCESS_RUNAWAY_DELAY} seconds"
      if [ "${procStartCount}" -gt 1 ]; then
        sleep "${CONTAINER_PROCESS_RUNAWAY_DELAY}"
      fi
    fi
  fi

  if [ "${DEBUG_MODE,,}" = "true" ]; then
    if [ "${CONTAINER_COLORIZE_OUTPUT,,}" = "false" ]; then
      echo -e "$(log_prefix)[STARTING] $SCRIPTPATH/$(basename "$0") ** [${PROCESS_NAME}] ${procStartWrapper}$1"
    else
      echo -e "$(log_prefix)${bdg}[STARTING]${boff} $SCRIPTPATH/$(basename "$0") ** [${PROCESS_NAME}] ${procStartWrapper}$1"
    fi
    echo -e "$(log_prefix)[STARTING] $SCRIPTPATH/$(basename "$0") ** [${PROCESS_NAME}] ${procStartWrapper}$1" >> "${CONTAINER_LOG_FILE_PATH}"/"${CONTAINER_LOG_FILE_NAME}" || true
  else
    if [ "${CONTAINER_COLORIZE_OUTPUT,,}" = "false" ]; then
      echo -e "$(log_prefix)[STARTING] ** [${PROCESS_NAME}] ${procStartWrapper}$1"
    else
      echo -e "$(log_prefix)${bdg}[STARTING]${boff} ** [${PROCESS_NAME}] ${procStartWrapper}$1"
    fi
    echo -e "$(log_prefix)[STARTING] $SCRIPTPATH/$(basename "$0") ** [${PROCESS_NAME}] ${procStartWrapper}$1" >> "${CONTAINER_LOG_FILE_PATH}"/"${CONTAINER_LOG_FILE_NAME}" || true
  fi
  output_on
}

# Log warning messages
print_warn() {
  output_off
  case "${CONTAINER_LOG_LEVEL,,}" in
    "debug" | "notice" | "warn" )
      if [ "${DEBUG_MODE,,}" = "true" ]; then
        if [ "${CONTAINER_COLORIZE_OUTPUT,,}" = "false" ]; then
          echo -e "$(log_prefix)[WARN] ** [${PROCESS_NAME}] $1"
        else
          echo -e "$(log_prefix)${bdb}[WARN]${boff} $SCRIPTPATH/$(basename "$0") ** [${PROCESS_NAME}] $1"
        fi
      else
        if [ "${CONTAINER_COLORIZE_OUTPUT,,}" = "false" ]; then
          echo -e "$(log_prefix)[WARN] ** [${PROCESS_NAME}] $1"
        else
          echo -e "$(log_prefix)${bdb}[WARN]${boff} ** [${PROCESS_NAME}] $1"
        fi
      fi
    ;;
  esac

  case "${CONTAINER_LOG_FILE_LEVEL,,}" in
    "debug" | "notice" | "warn" )
      echo -e "$(log_prefix)[WARN] ** [${PROCESS_NAME}] $1" >> "${CONTAINER_LOG_FILE_PATH}"/"${CONTAINER_LOG_FILE_NAME}" || true
    ;;
  esac

  output_on
}

# Run a command silently (suppress output)
silent() {
  if [ "${DEBUG_MODE}" = "true" ] || [ "${SHOW_OUTPUT,,}" = "true" ] || [ "${CONTAINER_LOG_LEVEL,,}" = "debug" ]; then
    "$@"
  else
    "$@" > /dev/null 2>&1
  fi
}

# Package Management Functions
#--------------------------------------------------
# Manage package installation/removal with different package managers
package() {
  cleanup() {
    case "${distro}" in
      "alpine" )
        rm -rf /root/.gitconfig
        rm -rf /var/cache/apk/*
      ;;
      "debian" | "ubuntu" )
        apt-get clean -y
        rm -rf /root/.gitconfig
        rm -rf /var/lib/apt/lists/*
      ;;
    esac
  }

  install() {
    case "${distro}" in
      "alpine" )
        if [[ "${1}" =~ ^\..* ]]; then
          local dependencies="-t"
        fi
        apk add ${dependencies} $@
      ;;
      "debian" | "ubuntu" )
        if [[ "${1}" =~ ^\..* ]]; then
          shift
        fi
        apt-get install -y --no-install-recommends $@
      ;;
    esac
  }

  remove() {
    case "${distro}" in
      "alpine" )
        apk del $@
      ;;
      "debian" | "ubuntu" )
        local packages="$@"
        if [[ "${packages}" =~ \..* ]]; then
          packages=$(echo "${packages}" | sed "s|\..* ||g")
        fi
        apt-get purge -y ${packages}
        apt-get autoremove -y
      ;;
    esac
  }

  update() {
    case "${distro}" in
      "alpine" )
        apk update
      ;;
      "debian" | "ubuntu" )
        apt-get update
      ;;
    esac
  }

  upgrade() {
    case "${distro}" in
      "alpine" )
        apk upgrade
      ;;
      "debian" | "ubuntu" )
        apt-get upgrade -y
      ;;
    esac
  }

  output_off
  local distro
  distro=$(cat /etc/os-release | grep ^ID= | cut -d = -f2)
  local action="${1}"
  shift
  local arguments=$@

  case "${action}" in
    add | install )
      action=install
      "${action}" "${arguments}"
    ;;
    delete | remove | uninstall )
      action=remove
      "${action}" "${arguments}"
    ;;
    * )
      "${action}" "${arguments}"
    ;;
  esac
  output_on
}

# Boolean Value Functions
#--------------------------------------------------
# Check if a value is logically "false"
var_false() {
  [ "${1,,}" = "false" ] || [ "${1,,}" = "no" ]
}

# Check if a value is not logically "false"
var_notfalse() {
  [ "${1,,}" != "false" ]
}

# Check if a value is not logically "true"
var_nottrue() {
  [ "${1,,}" != "true" ]
}

# Check if a value is logically "true"
var_true() {
  [ "${1,,}" = "true" ] || [ "${1,,}" = "yes" ]
}

# Convert true/false values to yes/no
truefalse_yesno() {
  value=$(set | grep "${1}"= | cut -d '=' -f2)
  var=$(set | grep "${1}"= | sed "s/=.*//g")

  if [ "${value,,}" = "true" ] || [ "${value,,}" = "yes" ]; then
    print_debug "Converting Variable Name ${var} value to 'yes'"
    unset "$1"
    if [ -n "$2" ]; then
      case "${2,,}" in
        "uppercase" | "upper" | "uc" )
          export "$1=YES"
        ;;
        "lowercase" | "lower" | "lc" )
          export "$1=yes"
        ;;
      esac
    else
      export "$1=yes"
    fi
  elif [ "${value,,}" = "false" ] || [ "${value,,}" = "no" ]; then
    print_debug "Converting Variable Name ${var} value to 'no'"
    unset "$1"
    if [ -n "$2" ]; then
      case "${2,,}" in
        "uppercase" | "upper" | "uc" )
          export "$1=NO"
        ;;
        "lowercase" | "lower" | "lc" )
          export "$1=no"
        ;;
      esac
    else
      export "$1=no"
    fi
  fi
}

# Convert true/false values to on/off
truefalse_onoff() {
  value=$(set | grep "${1}"= | cut -d '=' -f2)
  var=$(set | grep "${1}"= | sed "s/=.*//g")

  if [ "${value,,}" = "true" ] || [ "${value,,}" = "yes" ]; then
    print_debug "Converting Variable Name ${var} value to 'On'"
    unset "$1"
    if [ -n "$2" ]; then
      case "${2,,}" in
        "uppercase" | "upper" | "uc" )
          export "$1=ON"
        ;;
        "lowercase" | "lower" | "lc" )
          export "$1=on"
        ;;
      esac
    else
      export "$1=ON"
    fi
  elif [ "${value,,}" = "false" ] || [ "${value,,}" = "no" ]; then
    print_debug "Converting Variable Name ${var} value to 'Off'"
    unset "$1"
    if [ -n "$2" ]; then
      case "${2,,}" in
        "uppercase" | "upper" | "uc" )
          export "$1=OFF"
        ;;
        "lowercase" | "lower" | "lc" )
          export "$1=off"
        ;;
      esac
    else
      export "$1=off"
    fi
  fi
}

# Convert true/false values to 1/0
truefalse_onezero() {
  value=$(set | grep "${1}"= | cut -d '=' -f2)
  var=$(set | grep "${1}"= | sed "s/=.*//g")

  if [ "${value,,}" = "true" ] || [ "${value,,}" = "yes" ]; then
    print_debug "Converting Variable Name ${var} value to '1'"
    unset "$1"
    export "$1=1"
  elif [ "${value,,}" = "false" ] || [ "${value,,}" = "no" ]; then
    print_debug "Converting Variable Name ${var} value to '0'"
    unset "$1"
    export "$1=0"
  fi
}

# Convert yes/no values to true/false
yesno_truefalse() {
  value=$(set | grep "${1}"= | cut -d '=' -f2)
  var=$(set | grep "${1}"= | sed "s/=.*//g")

  if [ "${value,,}" = "true" ] || [ "${value,,}" = "yes" ]; then
    print_debug "Converting Variable Name ${var} value to 'yes'"
    unset "$1"
    if [ -n "$2" ]; then
      case "${2,,}" in
        "uppercase" | "upper" | "uc" )
          export "$1=TRUE"
        ;;
        "lowercase" | "lower" | "lc" )
          export "$1=true"
        ;;
      esac
    else
      export "$1=TRUE"
    fi
  elif [ "${value,,}" = "false" ] || [ "${value,,}" = "no" ]; then
    print_debug "Converting Variable Name ${var} value to 'no'"
    unset "$1"
    if [ -n "$2" ]; then
      case "$2" in
        "uppercase" | "upper" | "uc" )
          export "$1=FALSE"
        ;;
        "lowercase" | "lower" | "lc" )
          export "$1=false"
        ;;
      esac
    else
      export "$1=FALSE"
    fi
  fi
}

#--------------------------------------------------
# Main Execution
#--------------------------------------------------

# Process DEBUG_MODE settings
case "${DEBUG_MODE}" in
  "TRUE" | "true" | "YES" | "yes" | "ON" | "on" )
    CONTAINER_LOG_LEVEL="DEBUG"
    set -x
  ;;
  "FALSE" | "false" | "NO" | "no" | "OFF" | "off" )
    :
  ;;
  * )
    if [ "$(dirname "$0")" = "/var/run/s6/etc/cont-init.d" ] || [ "$(dirname "$0")" = "/etc/cont-init.d" ]; then
      if [ "${DEBUG_MODE}" = "$(basename \""$0"\")" ]; then
        print_notice "Enabling Debug mode for $(basename \""$0"\") scripts"
        set -x
      fi
    fi
    if [ "${DEBUG_MODE}" = "$(basename "$PWD")" ]; then
      print_notice "Enabling Debug mode for $(basename "$PWD") scripts"
      set -x
    fi
  ;;
esac
