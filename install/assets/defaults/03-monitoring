#!/command/with-contenv bash
#
# Zabbix monitoring configuration settings
# Sets defaults for Zabbix agent configuration in containerized environments
#

set -euo pipefail
IFS=$'\n\t'

#--------------------------------------------------
# Configuration
#--------------------------------------------------
# Zabbix agent paths and files
ZABBIX_AGENT_LOG_FILE=${ZABBIX_AGENT_LOG_FILE:-"zabbix_agentd.log"}
ZABBIX_AGENT_LOG_PATH=${ZABBIX_AGENT_LOG_PATH:-"/var/log/zabbix/agent/"}
ZABBIX_CERT_PATH=${ZABBIX_CERT_PATH:-"/etc/zabbix/certs/"}
ZABBIX_CONFIG_FILE=${ZABBIX_CONFIG_FILE:-"zabbix_agentd.conf"}
ZABBIX_CONFIG_PATH=${ZABBIX_CONFIG_PATH:-"/etc/zabbix/"}
ZABBIX_PID=${ZABBIX_PID:-"/var/lib/zabbix/run/zabbix-agent.pid"}
ZABBIX_SOCKET=${ZABBIX_SOCKET:-"/var/lib/zabbix/run/zabbix-agent.sock"}

# Zabbix agent network settings
ZABBIX_HOSTNAME=${ZABBIX_HOSTNAME:-"${CONTAINER_NAME:-$(hostname)}"}
ZABBIX_LISTEN_IP=${ZABBIX_LISTEN_IP:-"0.0.0.0"}
ZABBIX_LISTEN_PORT=${ZABBIX_LISTEN_PORT:-"10050"}
ZABBIX_SERVER=${ZABBIX_SERVER:-"0.0.0.0/0"}
ZABBIX_SERVER_ACTIVE=${ZABBIX_SERVER_ACTIVE:-"zabbix-proxy"}
ZABBIX_STATUS_PORT=${ZABBIX_STATUS_PORT:-"8050"}

# Zabbix agent behavior settings
ZABBIX_ALLOW_ROOT=${ZABBIX_ALLOW_ROOT:-"1"}
ZABBIX_BUFFER_SEND=${ZABBIX_BUFFER_SEND:-"5"}
ZABBIX_BUFFER_SIZE=${ZABBIX_BUFFER_SIZE:-"100"}
ZABBIX_DEBUGLEVEL=${ZABBIX_DEBUGLEVEL:-"1"}
ZABBIX_ENABLE_AUTOREGISTER=${ZABBIX_ENABLE_AUTOREGISTER:-"TRUE"}
ZABBIX_ENABLE_AUTOREGISTER_DNS=${ZABBIX_ENABLE_AUTOREGISTER_DNS:-"TRUE"}
ZABBIX_LOG_FILE_SIZE=${ZABBIX_LOG_FILE_SIZE:-"0"}
ZABBIX_MAXLINES_SECOND=${ZABBIX_MAXLINES_SECOND:-"20"}
ZABBIX_REFRESH_ACTIVE_CHECKS=${ZABBIX_REFRESH_ACTIVE_CHECKS:-"120"}
ZABBIX_REMOTECOMMANDS_ALLOW=${ZABBIX_REMOTECOMMANDS_ALLOW:-"*"}
ZABBIX_REMOTECOMMANDS_LOG=${ZABBIX_REMOTECOMMANDS_LOG:-"1"}
ZABBIX_SETUP_TYPE=${ZABBIX_SETUP_TYPE:-"AUTO"}
ZABBIX_START_AGENTS=${ZABBIX_START_AGENTS:-"1"}

# Zabbix user settings
ZABBIX_USER=${ZABBIX_USER:-"zabbix"}
ZABBIX_USER_DOAS=${ZABBIX_USER_DOAS:-"TRUE"}
ZABBIX_USER_SUDO=${ZABBIX_USER_SUDO:-"TRUE"}

# Zabbix agent type (default will be determined by OS detection)
ZABBIX_AGENT_TYPE=${ZABBIX_AGENT_TYPE:-""}

#--------------------------------------------------
# Helper Functions
#--------------------------------------------------
# Log a message to stdout with appropriate formatting
log_message() {
  local level="$1"
  local message="$2"

  if [[ -n "${CONTAINER_ENABLE_LOG_PREFIX:-}" ]] && [[ "${CONTAINER_ENABLE_LOG_PREFIX}" == "TRUE" ]]; then
    local dateFormat="${CONTAINER_LOG_PREFIX_DATE_FMT:-%Y-%m-%d}"
    local timeFormat="${CONTAINER_LOG_PREFIX_TIME_FMT:-%H:%M:%S}"
    local separator="${CONTAINER_LOG_PREFIX_SEPERATOR:-.}"

    local dateStr
    dateStr=$(date +"${dateFormat}")
    local timeStr
    timeStr=$(date +"${timeFormat}")

    echo "[${dateStr}${separator}${timeStr}] [${level}] ${message}"
  else
    echo "[${level}] ${message}"
  fi
}

# Detect OS type and version for Zabbix agent type configuration
detect_os() {
  if [[ ! -f "/etc/os-release" ]]; then
    log_message "WARNING" "Cannot detect OS: /etc/os-release not found"
    return 1
  fi

  local osId
  osId=$(grep -E "^ID=" /etc/os-release | cut -d= -f2 | tr -d '"') || {
    log_message "WARNING" "Failed to detect OS ID"
    return 1
  }

  case "${osId}" in
    "alpine")
      local osVer
      osVer=$(grep -E "VERSION_ID" /etc/os-release | cut -d= -f2 | cut -d. -f2 | cut -d_ -f1 | tr -d '"') || {
        log_message "WARNING" "Failed to detect Alpine version"
        return 1
      }

      if [[ "${osVer}" -ge 11 ]] || [[ "${osVer}" == "edge" ]]; then
        ZABBIX_AGENT_TYPE="modern"
      else
        ZABBIX_AGENT_TYPE="classic"
      fi
      ;;
    "debian"|"ubuntu")
      ZABBIX_AGENT_TYPE="modern"
      ;;
    *)
      log_message "WARNING" "Unknown OS: ${osId}, defaulting to classic agent"
      ZABBIX_AGENT_TYPE="classic"
      ;;
  esac

  log_message "DEBUG" "Detected OS: ${osId}, using ${ZABBIX_AGENT_TYPE} Zabbix agent"
  return 0
}

# Validate critical paths exist
validate_paths() {
  # Check log directory exists
  if [[ ! -d "${ZABBIX_AGENT_LOG_PATH}" ]]; then
    log_message "INFO" "Creating Zabbix agent log directory: ${ZABBIX_AGENT_LOG_PATH}"
    mkdir -p "${ZABBIX_AGENT_LOG_PATH}" || {
      log_message "ERROR" "Failed to create log directory: ${ZABBIX_AGENT_LOG_PATH}"
      return 1
    }
  fi

  # Check config directory exists
  if [[ ! -d "${ZABBIX_CONFIG_PATH}" ]]; then
    log_message "INFO" "Creating Zabbix config directory: ${ZABBIX_CONFIG_PATH}"
    mkdir -p "${ZABBIX_CONFIG_PATH}" || {
      log_message "ERROR" "Failed to create config directory: ${ZABBIX_CONFIG_PATH}"
      return 1
    }
  }

  # Check certificates directory exists
  if [[ ! -d "${ZABBIX_CERT_PATH}" ]]; then
    log_message "INFO" "Creating Zabbix certificates directory: ${ZABBIX_CERT_PATH}"
    mkdir -p "${ZABBIX_CERT_PATH}" || {
      log_message "ERROR" "Failed to create certificates directory: ${ZABBIX_CERT_PATH}"
      return 1
    }
  }

  return 0
}

#--------------------------------------------------
# Main Execution
#--------------------------------------------------
# Detect OS if ZABBIX_AGENT_TYPE not explicitly set
if [[ -z "${ZABBIX_AGENT_TYPE}" ]]; then
  detect_os || {
    log_message "WARNING" "OS detection failed, defaulting to classic agent"
    ZABBIX_AGENT_TYPE="classic"
  }
fi

# Validate paths if monitoring is enabled
if [[ "${CONTAINER_ENABLE_MONITORING:-FALSE}" == "TRUE" ]]; then
  validate_paths || {
    log_message "ERROR" "Failed to validate Zabbix paths"
    exit 1
  }
fi

# Output debug information if enabled
if [[ "${DEBUG_MODE:-FALSE}" == "TRUE" ]]; then
  log_message "DEBUG" "Zabbix monitoring configuration:"
  log_message "DEBUG" "ZABBIX_AGENT_TYPE=${ZABBIX_AGENT_TYPE}"
  log_message "DEBUG" "ZABBIX_SERVER=${ZABBIX_SERVER}"
  log_message "DEBUG" "ZABBIX_SERVER_ACTIVE=${ZABBIX_SERVER_ACTIVE}"
  log_message "DEBUG" "ZABBIX_HOSTNAME=${ZABBIX_HOSTNAME}"
fi

# Export all variables to make them available to child processes
export ZABBIX_AGENT_LOG_FILE
export ZABBIX_AGENT_LOG_PATH
export ZABBIX_AGENT_TYPE
export ZABBIX_ALLOW_ROOT
export ZABBIX_BUFFER_SEND
export ZABBIX_BUFFER_SIZE
export ZABBIX_CERT_PATH
export ZABBIX_CONFIG_FILE
export ZABBIX_CONFIG_PATH
export ZABBIX_DEBUGLEVEL
export ZABBIX_ENABLE_AUTOREGISTER
export ZABBIX_ENABLE_AUTOREGISTER_DNS
export ZABBIX_HOSTNAME
export ZABBIX_LISTEN_IP
export ZABBIX_LISTEN_PORT
export ZABBIX_LOG_FILE_SIZE
export ZABBIX_MAXLINES_SECOND
export ZABBIX_PID
export ZABBIX_REFRESH_ACTIVE_CHECKS
export ZABBIX_REMOTECOMMANDS_ALLOW
export ZABBIX_REMOTECOMMANDS_LOG
export ZABBIX_SERVER
export ZABBIX_SERVER_ACTIVE
export ZABBIX_SETUP_TYPE
export ZABBIX_SOCKET
export ZABBIX_START_AGENTS
export ZABBIX_STATUS_PORT
export ZABBIX_USER
export ZABBIX_USER_DOAS
export ZABBIX_USER_SUDO

log_message "DEBUG" "Zabbix monitoring defaults loaded successfully"
