#!/command/with-contenv bash
#
# Container Initialization Configuration
# This script sets default environment variables for container configuration
# and performs initial setup for various services.
#

set -euo pipefail
IFS=$'\n\t'

#--------------------------------------------------
# Configuration
#--------------------------------------------------

# Default container paths
CONTAINER_CUSTOM_PATH=${CONTAINER_CUSTOM_PATH:-"/assets/custom/"}
CONTAINER_CUSTOM_SCRIPTS_PATH=${CONTAINER_CUSTOM_SCRIPTS_PATH:-"/assets/custom-scripts/"}
CONTAINER_PROCESS_HELPER_PATH=${CONTAINER_PROCESS_HELPER_PATH:-"/assets/container/processhelper/"}
CONTAINER_LOG_FILE_PATH=${CONTAINER_LOG_FILE_PATH:-"/var/log/container/"}
CONTAINER_SCHEDULING_LOCATION=${CONTAINER_SCHEDULING_LOCATION:-"/assets/cron/"}

# Feature toggles
CONTAINER_ENABLE_CUSTOM_BASH_PROMPT=${CONTAINER_ENABLE_CUSTOM_BASH_PROMPT:-"TRUE"}
CONTAINER_ENABLE_DOCKER_SECRETS=${CONTAINER_ENABLE_DOCKER_SECRETS:-"TRUE"}
CONTAINER_ENABLE_FAIL2BAN=${CONTAINER_ENABLE_FAIL2BAN:-"FALSE"}
CONTAINER_ENABLE_FIREWALL=${CONTAINER_ENABLE_FIREWALL:-"FALSE"}
CONTAINER_ENABLE_LOGROTATE=${CONTAINER_ENABLE_LOGROTATE:-"TRUE"}
CONTAINER_ENABLE_LOGSHIPPING=${CONTAINER_ENABLE_LOGSHIPPING:-"FALSE"}
CONTAINER_ENABLE_LOG_PREFIX=${CONTAINER_ENABLE_LOG_PREFIX:-"TRUE"}
CONTAINER_ENABLE_MESSAGING=${CONTAINER_ENABLE_MESSAGING:-"TRUE"}
CONTAINER_ENABLE_MONITORING=${CONTAINER_ENABLE_MONITORING:-"TRUE"}
CONTAINER_ENABLE_PERMISSIONS=${CONTAINER_ENABLE_PERMISSIONS:-"TRUE"}
CONTAINER_ENABLE_PROCESS_COUNTER=${CONTAINER_ENABLE_PROCESS_COUNTER:-"TRUE"}
CONTAINER_ENABLE_PROCESS_HELPER=${CONTAINER_ENABLE_PROCESS_HELPER:-"TRUE"}
CONTAINER_ENABLE_SCHEDULING=${CONTAINER_ENABLE_SCHEDULING:-"TRUE"}

# Process protection settings
CONTAINER_PROCESS_RUNAWAY_PROTECTOR=${CONTAINER_PROCESS_RUNAWAY_PROTECTOR:-"TRUE"}
CONTAINER_PROCESS_RUNAWAY_DELAY=${CONTAINER_PROCESS_RUNAWAY_DELAY:-"1"}
CONTAINER_PROCESS_RUNAWAY_LIMIT=${CONTAINER_PROCESS_RUNAWAY_LIMIT:-"50"}
CONTAINER_PROCESS_RUNAWAY_SHOW_OUTPUT_FINAL=${CONTAINER_PROCESS_RUNAWAY_SHOW_OUTPUT_FINAL:-"TRUE"}

# Backends
CONTAINER_FIREWALL_BACKEND=${CONTAINER_FIREWALL_BACKEND:-"iptables"}
CONTAINER_LOGSHIPPING_BACKEND=${CONTAINER_LOGSHIPPING_BACKEND:-"fluent-bit"}
CONTAINER_MESSAGING_BACKEND=${CONTAINER_MESSAGING_BACKEND:-"msmtp"}
CONTAINER_MONITORING_BACKEND=${CONTAINER_MONITORING_BACKEND:-"zabbix"}
CONTAINER_SCHEDULING_BACKEND=${CONTAINER_SCHEDULING_BACKEND:-"cron"}

# Logging configuration
CONTAINER_LOG_LEVEL=${CONTAINER_LOG_LEVEL:-"NOTICE"}
CONTAINER_LOG_PREFIX_DATE_FMT=${CONTAINER_LOG_PREFIX_DATE_FMT:-"%Y-%m-%d"}
CONTAINER_LOG_PREFIX_SEPERATOR=${CONTAINER_LOG_PREFIX_SEPERATOR:-"."}
CONTAINER_LOG_PREFIX_TIME_FMT=${CONTAINER_LOG_PREFIX_TIME_FMT:-"%H:%M:%S"}
CONTAINER_LOG_FILE_NAME=${CONTAINER_LOG_FILE_NAME:-"container.log"}
CONTAINER_LOG_FILE_LEVEL=${CONTAINER_LOG_FILE_LEVEL:-"DEBUG"}
CONTAINER_LOG_FILE_PREFIX_DATE_FMT=${CONTAINER_LOG_FILE_PREFIX_DATE_FMT:-"%Y-%m-%d"}
CONTAINER_LOG_FILE_PREFIX_SEPERATOR=${CONTAINER_LOG_FILE_PREFIX_SEPERATOR:-"."}
CONTAINER_LOG_FILE_PREFIX_TIME_FMT=${CONTAINER_LOG_FILE_PREFIX_TIME_FMT:-"%H:%M:%S"}

# Process helper configuration
CONTAINER_PROCESS_HELPER_DATE_FMT=${CONTAINER_PROCESS_HELPER_DATE_FMT:-"%Y-%m-%d"}
CONTAINER_PROCESS_HELPER_SCRIPT=${CONTAINER_PROCESS_HELPER_SCRIPT:-"processhelper.sh"}
CONTAINER_PROCESS_HELPER_TIME_FMT=${CONTAINER_PROCESS_HELPER_TIME_FMT:-"%H:%M:%S"}

# General settings
CONTAINER_NAME=${CONTAINER_NAME:-"$(hostname)"}
CONTAINER_SKIP_SANITY_CHECK=${CONTAINER_SKIP_SANITY_CHECK:-"FALSE"}
DEBUG_MODE=${DEBUG_MODE:-"FALSE"}
PROCESS_NAME=${PROCESS_NAME:-"container"}

# Script path
SCRIPTPATH="$( cd "$(dirname "$0")" >/dev/null 2>&1 || exit 1; pwd -P )"

#--------------------------------------------------
# Helper Functions
#--------------------------------------------------

# Validate that required directories exist
validate_paths() {
  local missingPaths=0

  # Check critical paths
  if [[ ! -d "${CONTAINER_LOG_FILE_PATH}" ]]; then
    echo "ERROR: Log directory ${CONTAINER_LOG_FILE_PATH} does not exist" >&2
    missingPaths=$((missingPaths + 1))
  fi

  if [[ "${CONTAINER_ENABLE_PROCESS_HELPER}" == "TRUE" && ! -d "${CONTAINER_PROCESS_HELPER_PATH}" ]]; then
    echo "ERROR: Process helper directory ${CONTAINER_PROCESS_HELPER_PATH} does not exist" >&2
    missingPaths=$((missingPaths + 1))
  fi

  if [[ "${CONTAINER_ENABLE_SCHEDULING}" == "TRUE" && ! -d "${CONTAINER_SCHEDULING_LOCATION}" ]]; then
    echo "WARNING: Scheduling directory ${CONTAINER_SCHEDULING_LOCATION} does not exist" >&2
  fi

  # Return failure if any critical paths are missing
  if [[ ${missingPaths} -gt 0 ]]; then
    return 1
  fi

  return 0
}

# Print debug information when DEBUG_MODE is TRUE
debug_info() {
  if [[ "${DEBUG_MODE}" == "TRUE" ]]; then
    echo "DEBUG: Container configuration loaded"
    echo "DEBUG: Container name: ${CONTAINER_NAME}"
    echo "DEBUG: Log level: ${CONTAINER_LOG_LEVEL}"
    echo "DEBUG: Features enabled:"

    # List enabled features
    [[ "${CONTAINER_ENABLE_CUSTOM_BASH_PROMPT}" == "TRUE" ]] && echo "DEBUG:   - Custom bash prompt"
    [[ "${CONTAINER_ENABLE_DOCKER_SECRETS}" == "TRUE" ]] && echo "DEBUG:   - Docker secrets"
    [[ "${CONTAINER_ENABLE_FAIL2BAN}" == "TRUE" ]] && echo "DEBUG:   - Fail2ban"
    [[ "${CONTAINER_ENABLE_FIREWALL}" == "TRUE" ]] && echo "DEBUG:   - Firewall (${CONTAINER_FIREWALL_BACKEND})"
    [[ "${CONTAINER_ENABLE_LOGROTATE}" == "TRUE" ]] && echo "DEBUG:   - Log rotation"
    [[ "${CONTAINER_ENABLE_LOGSHIPPING}" == "TRUE" ]] && echo "DEBUG:   - Log shipping (${CONTAINER_LOGSHIPPING_BACKEND})"
    [[ "${CONTAINER_ENABLE_MESSAGING}" == "TRUE" ]] && echo "DEBUG:   - Messaging (${CONTAINER_MESSAGING_BACKEND})"
    [[ "${CONTAINER_ENABLE_MONITORING}" == "TRUE" ]] && echo "DEBUG:   - Monitoring (${CONTAINER_MONITORING_BACKEND})"
    [[ "${CONTAINER_ENABLE_PROCESS_HELPER}" == "TRUE" ]] && echo "DEBUG:   - Process helper"
    [[ "${CONTAINER_ENABLE_SCHEDULING}" == "TRUE" ]] && echo "DEBUG:   - Scheduling (${CONTAINER_SCHEDULING_BACKEND})"
  fi
}

#--------------------------------------------------
# Main Execution
#--------------------------------------------------

# Skip validation if explicitly disabled
if [[ "${CONTAINER_SKIP_SANITY_CHECK}" != "TRUE" ]]; then
  # Validate critical paths
  validate_paths || exit 1
fi

# Print debug information
debug_info

# Export variables for child processes
export CONTAINER_CUSTOM_PATH
export CONTAINER_CUSTOM_SCRIPTS_PATH
export CONTAINER_ENABLE_CUSTOM_BASH_PROMPT
export CONTAINER_ENABLE_DOCKER_SECRETS
export CONTAINER_ENABLE_FAIL2BAN
export CONTAINER_ENABLE_FIREWALL
export CONTAINER_ENABLE_LOGROTATE
export CONTAINER_ENABLE_LOGSHIPPING
export CONTAINER_ENABLE_LOG_PREFIX
export CONTAINER_ENABLE_MESSAGING
export CONTAINER_ENABLE_MONITORING
export CONTAINER_ENABLE_PERMISSIONS
export CONTAINER_ENABLE_PROCESS_COUNTER
export CONTAINER_ENABLE_PROCESS_HELPER
export CONTAINER_ENABLE_SCHEDULING
export CONTAINER_FIREWALL_BACKEND
export CONTAINER_LOGSHIPPING_BACKEND
export CONTAINER_LOG_LEVEL
export CONTAINER_LOG_PREFIX_DATE_FMT
export CONTAINER_LOG_PREFIX_SEPERATOR
export CONTAINER_LOG_PREFIX_TIME_FMT
export CONTAINER_LOG_FILE_NAME
export CONTAINER_LOG_FILE_LEVEL
export CONTAINER_LOG_FILE_PATH
export CONTAINER_LOG_FILE_PREFIX_DATE_FMT
export CONTAINER_LOG_FILE_PREFIX_SEPERATOR
export CONTAINER_LOG_FILE_PREFIX_TIME_FMT
export CONTAINER_MESSAGING_BACKEND
export CONTAINER_MONITORING_BACKEND
export CONTAINER_NAME
export CONTAINER_PROCESS_HELPER_DATE_FMT
export CONTAINER_PROCESS_HELPER_PATH
export CONTAINER_PROCESS_HELPER_SCRIPT
export CONTAINER_PROCESS_HELPER_TIME_FMT
export CONTAINER_PROCESS_RUNAWAY_PROTECTOR
export CONTAINER_PROCESS_RUNAWAY_DELAY
export CONTAINER_PROCESS_RUNAWAY_LIMIT
export CONTAINER_PROCESS_RUNAWAY_SHOW_OUTPUT_FINAL
export CONTAINER_SCHEDULING_BACKEND
export CONTAINER_SCHEDULING_LOCATION
export CONTAINER_SKIP_SANITY_CHECK
export DEBUG_MODE
export PROCESS_NAME
export SCRIPTPATH
